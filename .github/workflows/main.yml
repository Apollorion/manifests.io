name: 'main'

on:
  push:
    branches:
      - main
  pull_request:
    types: [ labeled ]

jobs:

  stage:
    name: 'stage'
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'safe-to-stage' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

      # Checkout PR
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      # Install NPM/yarn
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.2'

      # Install dependencies
      - name: Yarn Install
        run: cd app && yarn install

      # Build Application
      - name: Yarn Build
        run: cd app && yarn build
        env:
          REACT_APP_API_URL: "https://api.stage.manifests.io/"
          REACT_APP_GA_ID: "UA-217852147-1"

      # ETL pipeline
      - name: ETL
        run: cd ETL && python3 main.py && cp -r ./dist ../lambda/.

      # Build Lambda Load Lambda Function
      - name: Build Lambd Load Lambda Function
        run: cd ETL && python3 -m pip install --target ./ -r requirements.txt && zip -r lambda_load_payload.zip ./ && mv lambda_load_payload.zip ../.

      # Build Lambda Function
      - name: Build Lambda Function
        run: cd lambda && python3 -m pip install --target ./ -r requirements.txt && zip -r payload.zip ./ && mv payload.zip ../.

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd terraform && terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Use staging workspace
      - name: Terraform Workspace Stage
        run: cd terraform && terraform workspace select staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Create Cloudfront invalidation
      - run: aws cloudfront create-invalidation --distribution-id E30B3BO0NTENTR --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"

  push:
    name: 'push'
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      # Install NPM/yarn
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.2'

      # Install dependencies
      - name: Yarn Install
        run: cd app && yarn install

      # Build Application
      - name: Yarn Build
        run: cd app && yarn build
        env:
          REACT_APP_API_URL: "https://api.manifests.io/"
          REACT_APP_GA_ID: "UA-217852147-2"

      # ETL pipeline
      - name: ETL
        run: cd ETL && python3 main.py

      # Build Lambda Load Lambda Function
      - name: Build Lambd Load Lambda Function
        run: cd ETL && python3 -m pip install --target ./ -r requirements.txt && zip -r lambda_load_payload.zip ./ && mv lambda_load_payload.zip ../.

      # Build Lambda Function
      - name: Build Lambda Function
        run: cd lambda && python3 -m pip install --target ./ -r requirements.txt && zip -r payload.zip ./ && mv payload.zip ../.

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd terraform && terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Use production workspace
      - name: Terraform Workspace Production
        run: cd terraform && terraform workspace select production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: cd terraform && terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Create Cloudfront invalidation
      - run: aws cloudfront create-invalidation --distribution-id E163KJ0CXL1KOA --paths "/*"
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
