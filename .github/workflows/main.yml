name: 'main'

on:
  push:
    branches:
      - main
  pull_request:
    types: [ labeled ]

permissions:
  id-token: write
  contents: read
  deployments: write


jobs:

  stage:
    name: 'Staging Deployment'
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'safe-to-stage' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: "us-east-1"
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "manifests-io-staging"
          role-duration-seconds: 900

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://stage.manifests.io
          environment: Staging
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Update deployment status (in progress)
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://stage.manifests.io
          state: "in_progress"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      # Checkout PR
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      # ETL pipeline
      - name: ETL
        run: ./scripts/runETL.sh && cp -r ./ETL/dist ./lambda/.

      # Build Lambda Function
      - name: Build Lambda Function
        run: cd lambda && python3 -m pip install --target ./ -r requirements.txt

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd terraform && terraform init

      # Use staging workspace
      - name: Terraform Workspace Stage
        run: cd terraform && terraform workspace select staging

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve

      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://stage.manifests.io
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://stage.manifests.io
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  push:
    name: 'Production Deployment'
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: "us-east-1"
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "manifests-io-production"
          role-duration-seconds: 900

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://manifests.io
          environment: Production
          production_environment: true

      - name: Update deployment status (in progress)
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://manifests.io
          state: "in_progress"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      # ETL pipeline
      - name: ETL
        run: ./scripts/runETL.sh && cp -r ./ETL/dist ./lambda/.

      # Build Lambda Function
      - name: Build Lambda Function
        run: cd lambda && python3 -m pip install --target ./ -r requirements.txt

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd terraform && terraform init

      # Use production workspace
      - name: Terraform Workspace Production
        run: cd terraform && terraform workspace select production

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: cd terraform && terraform apply -auto-approve

      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://manifests.io
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          environment_url: https://manifests.io
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
