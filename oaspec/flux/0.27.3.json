{"definitions": {"io.fluxcd.toolkit.notification.v1beta1.Alert": {"description": "Alert is the Schema for the alerts API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertSpec", "description": "AlertSpec defines an alerting rule for events involving a list of objects"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertStatus", "description": "AlertStatus defines the observed state of Alert"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.notification", "version": "v1beta1", "kind": "Alert"}]}, "io.fluxcd.toolkit.source.v1beta1.Bucket": {"description": "Bucket is the Schema for the buckets API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketSpec", "description": "BucketSpec defines the desired state of an S3 compatible bucket"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketStatus", "description": "BucketStatus defines the observed state of a bucket"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.source", "version": "v1beta1", "kind": "Bucket"}]}, "io.fluxcd.toolkit.source.v1beta1.GitRepository": {"description": "GitRepository is the Schema for the gitrepositories API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpec", "description": "GitRepositorySpec defines the desired state of a Git repository."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatus", "description": "GitRepositoryStatus defines the observed state of a Git repository."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.source", "version": "v1beta1", "kind": "GitRepository"}]}, "io.fluxcd.toolkit.source.v1beta1.HelmChart": {"description": "HelmChart is the Schema for the helmcharts API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartSpec", "description": "HelmChartSpec defines the desired state of a Helm chart."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartStatus", "description": "HelmChartStatus defines the observed state of the HelmChart."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.source", "version": "v1beta1", "kind": "HelmChart"}]}, "io.fluxcd.toolkit.helm.v2beta1.HelmRelease": {"description": "HelmRelease is the Schema for the helmreleases API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpec", "description": "HelmReleaseSpec defines the desired state of a Helm release."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseStatus", "description": "HelmReleaseStatus defines the observed state of a HelmRelease."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.helm", "version": "v2beta1", "kind": "HelmRelease"}]}, "io.fluxcd.toolkit.source.v1beta1.HelmRepository": {"description": "HelmRepository is the Schema for the helmrepositories API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpec", "description": "HelmRepositorySpec defines the reference to a Helm repository."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatus", "description": "HelmRepositoryStatus defines the observed state of the HelmRepository."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.source", "version": "v1beta1", "kind": "HelmRepository"}]}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicy": {"description": "ImagePolicy is the Schema for the imagepolicies API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpec", "description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicyStatus", "description": "ImagePolicyStatus defines the observed state of ImagePolicy"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha1", "kind": "ImagePolicy"}]}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicy": {"description": "ImagePolicy is the Schema for the imagepolicies API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpec", "description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicyStatus", "description": "ImagePolicyStatus defines the observed state of ImagePolicy"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha2", "kind": "ImagePolicy"}]}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicy": {"description": "ImagePolicy is the Schema for the imagepolicies API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpec", "description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicyStatus", "description": "ImagePolicyStatus defines the observed state of ImagePolicy"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1beta1", "kind": "ImagePolicy"}]}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepository": {"description": "ImageRepository is the Schema for the imagerepositories API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpec", "description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatus", "description": "ImageRepositoryStatus defines the observed state of ImageRepository"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha1", "kind": "ImageRepository"}]}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepository": {"description": "ImageRepository is the Schema for the imagerepositories API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpec", "description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatus", "description": "ImageRepositoryStatus defines the observed state of ImageRepository"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha2", "kind": "ImageRepository"}]}, "io.fluxcd.toolkit.image.v1beta1.ImageRepository": {"description": "ImageRepository is the Schema for the imagerepositories API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpec", "description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatus", "description": "ImageRepositoryStatus defines the observed state of ImageRepository"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1beta1", "kind": "ImageRepository"}]}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomation": {"description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpec", "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationStatus", "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha1", "kind": "ImageUpdateAutomation"}]}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomation": {"description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpec", "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationStatus", "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1alpha2", "kind": "ImageUpdateAutomation"}]}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomation": {"description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpec", "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationStatus", "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.image", "version": "v1beta1", "kind": "ImageUpdateAutomation"}]}, "io.fluxcd.toolkit.kustomize.v1beta1.Kustomization": {"description": "Kustomization is the Schema for the kustomizations API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpec", "description": "KustomizationSpec defines the desired state of a kustomization."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatus", "description": "KustomizationStatus defines the observed state of a kustomization."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.kustomize", "version": "v1beta1", "kind": "Kustomization"}]}, "io.fluxcd.toolkit.kustomize.v1beta2.Kustomization": {"description": "Kustomization is the Schema for the kustomizations API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpec", "description": "KustomizationSpec defines the configuration to calculate the desired state from a Source using Kustomize."}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatus", "description": "KustomizationStatus defines the observed state of a kustomization."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.kustomize", "version": "v1beta2", "kind": "Kustomization"}]}, "io.fluxcd.toolkit.notification.v1beta1.Provider": {"description": "Provider is the Schema for the providers API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ProviderSpec", "description": "ProviderSpec defines the desired state of Provider"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ProviderStatus", "description": "ProviderStatus defines the observed state of Provider"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.notification", "version": "v1beta1", "kind": "Provider"}]}, "io.fluxcd.toolkit.notification.v1beta1.Receiver": {"description": "Receiver is the Schema for the receivers API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverSpec", "description": "ReceiverSpec defines the desired state of Receiver"}, "status": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverStatus", "description": "ReceiverStatus defines the observed state of Receiver"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "io.fluxcd.toolkit.notification", "version": "v1beta1", "kind": "Receiver"}]}, "io.fluxcd.toolkit.notification.v1beta1.AlertSpec": {"description": "AlertSpec defines an alerting rule for events involving a list of objects", "properties": {"eventSeverity": {"default": "info", "description": "Filter events based on severity, defaults to ('info'). If set to 'info' no events will be filtered.", "enum": ["info", "error"], "type": "string"}, "eventSources": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertSpecEventsources", "description": "Filter events based on the involved objects."}, "exclusionList": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertSpecExclusionlist", "description": "A list of Golang regular expressions to be used for excluding messages."}, "providerRef": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertSpecProviderref", "description": "Send events using this provider."}, "summary": {"description": "Short description of the impact and affected cluster.", "type": "string"}, "suspend": {"description": "This flag tells the controller to suspend subsequent events dispatching. Defaults to false.", "type": "boolean"}}, "required": ["eventSources", "providerRef"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.AlertStatus": {"default": {"observedGeneration": -1}, "description": "AlertStatus defines the observed state of Alert", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.AlertStatusConditions", "description": ""}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.BucketSpec": {"description": "BucketSpec defines the desired state of an S3 compatible bucket", "properties": {"accessFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketSpecAccessfrom", "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object."}, "bucketName": {"description": "The bucket name.", "type": "string"}, "endpoint": {"description": "The bucket endpoint address.", "type": "string"}, "ignore": {"description": "Ignore overrides the set of excluded patterns in the .sourceignore format (which is the same as .gitignore). If not provided, a default will be used, consult the documentation for your version to find out what those are.", "type": "string"}, "insecure": {"description": "Insecure allows connecting to a non-TLS S3 HTTP endpoint.", "type": "boolean"}, "interval": {"description": "The interval at which to check for bucket updates.", "type": "string"}, "provider": {"default": "generic", "description": "The S3 compatible storage provider name, default ('generic').", "enum": ["generic", "aws", "gcp"], "type": "string"}, "region": {"description": "The bucket region.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketSpecSecretref", "description": "The name of the secret containing authentication credentials for the Bucket."}, "suspend": {"description": "This flag tells the controller to suspend the reconciliation of this source.", "type": "boolean"}, "timeout": {"default": "60s", "description": "The timeout for download operations, defaults to 60s.", "type": "string"}}, "required": ["bucketName", "endpoint", "interval"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.BucketStatus": {"default": {"observedGeneration": -1}, "description": "BucketStatus defines the observed state of a bucket", "properties": {"artifact": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketStatusArtifact", "description": "Artifact represents the output of the last successful Bucket sync."}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketStatusConditions", "description": "Conditions holds the conditions for the Bucket."}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "url": {"description": "URL is the download link for the artifact output of the last Bucket sync.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpec": {"description": "GitRepositorySpec defines the desired state of a Git repository.", "properties": {"accessFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecAccessfrom", "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object."}, "gitImplementation": {"default": "go-git", "description": "Determines which git client library to use. Defaults to go-git, valid values are ('go-git', 'libgit2').", "enum": ["go-git", "libgit2"], "type": "string"}, "ignore": {"description": "Ignore overrides the set of excluded patterns in the .sourceignore format (which is the same as .gitignore). If not provided, a default will be used, consult the documentation for your version to find out what those are.", "type": "string"}, "include": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecInclude", "description": "Extra git repositories to map into the repository"}, "interval": {"description": "The interval at which to check for repository updates.", "type": "string"}, "recurseSubmodules": {"description": "When enabled, after the clone is created, initializes all submodules within, using their default settings. This option is available only when using the 'go-git' GitImplementation.", "type": "boolean"}, "ref": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecRef", "description": "The Git reference to checkout and monitor for changes, defaults to master branch."}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecSecretref", "description": "The secret name containing the Git credentials. For HTTPS repositories the secret must contain username and password fields. For SSH repositories the secret must contain identity, identity.pub and known_hosts fields."}, "suspend": {"description": "This flag tells the controller to suspend the reconciliation of this source.", "type": "boolean"}, "timeout": {"default": "60s", "description": "The timeout for remote Git operations like cloning, defaults to 60s.", "type": "string"}, "url": {"description": "The repository URL, can be a HTTP/S or SSH address.", "pattern": "^(http|https|ssh)://", "type": "string"}, "verify": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecVerify", "description": "Verify OpenPGP signature for the Git commit HEAD points to."}}, "required": ["interval", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatus": {"default": {"observedGeneration": -1}, "description": "GitRepositoryStatus defines the observed state of a Git repository.", "properties": {"artifact": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusArtifact", "description": "Artifact represents the output of the last successful repository sync."}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusConditions", "description": "Conditions holds the conditions for the GitRepository."}, "includedArtifacts": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusIncludedartifacts", "description": "IncludedArtifacts represents the included artifacts from the last successful repository sync."}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "url": {"description": "URL is the download link for the artifact output of the last repository sync.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartSpec": {"description": "HelmChartSpec defines the desired state of a Helm chart.", "properties": {"accessFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartSpecAccessfrom", "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object."}, "chart": {"description": "The name or path the Helm chart is available at in the SourceRef.", "type": "string"}, "interval": {"description": "The interval at which to check the Source for updates.", "type": "string"}, "reconcileStrategy": {"default": "ChartVersion", "description": "Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.", "enum": ["ChartVersion", "Revision"], "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartSpecSourceref", "description": "The reference to the Source the chart is available at."}, "suspend": {"description": "This flag tells the controller to suspend the reconciliation of this source.", "type": "boolean"}, "valuesFile": {"description": "Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.", "type": "string"}, "valuesFiles": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartSpecValuesfiles", "description": "Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted."}, "version": {"default": "*", "description": "The chart version semver expression, ignored for charts from GitRepository and Bucket sources. Defaults to latest when omitted.", "type": "string"}}, "required": ["chart", "interval", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartStatus": {"default": {"observedGeneration": -1}, "description": "HelmChartStatus defines the observed state of the HelmChart.", "properties": {"artifact": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartStatusArtifact", "description": "Artifact represents the output of the last successful chart sync."}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartStatusConditions", "description": "Conditions holds the conditions for the HelmChart."}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "url": {"description": "URL is the download link for the last chart pulled.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpec": {"description": "HelmReleaseSpec defines the desired state of a Helm release.", "properties": {"chart": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChart", "description": "Chart defines the template of the v1beta1.HelmChart that should be created for this HelmRelease."}, "dependsOn": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecDependson", "description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled."}, "install": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecInstall", "description": "Install holds the configuration for Helm install actions for this HelmRelease."}, "interval": {"description": "Interval at which to reconcile the Helm release.", "type": "string"}, "kubeConfig": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecKubeconfig", "description": "KubeConfig for reconciling the HelmRelease on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName."}, "maxHistory": {"description": "MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.", "type": "integer"}, "postRenderers": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecPostrenderers", "description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition."}, "releaseName": {"description": "ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.", "maxLength": 53, "minLength": 1, "type": "string"}, "rollback": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecRollback", "description": "Rollback holds the configuration for Helm rollback actions for this HelmRelease."}, "serviceAccountName": {"description": "The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.", "type": "string"}, "storageNamespace": {"description": "StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.", "maxLength": 63, "minLength": 1, "type": "string"}, "suspend": {"description": "Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.", "type": "boolean"}, "targetNamespace": {"description": "TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.", "maxLength": 63, "minLength": 1, "type": "string"}, "test": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecTest", "description": "Test holds the configuration for Helm test actions for this HelmRelease."}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.", "type": "string"}, "uninstall": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUninstall", "description": "Uninstall holds the configuration for Helm uninstall actions for this HelmRelease."}, "upgrade": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUpgrade", "description": "Upgrade holds the configuration for Helm upgrade actions for this HelmRelease."}, "values": {"description": "Values holds the values for this Helm release.", "x-kubernetes-preserve-unknown-fields": true}, "valuesFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecValuesfrom", "description": "ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged."}}, "required": ["chart", "interval"], "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseStatus": {"default": {"observedGeneration": -1}, "description": "HelmReleaseStatus defines the observed state of a HelmRelease.", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseStatusConditions", "description": "Conditions holds the conditions for the HelmRelease."}, "failures": {"description": "Failures is the reconciliation failure count against the latest desired state. It is reset after a successful reconciliation.", "format": "int64", "type": "integer"}, "helmChart": {"description": "HelmChart is the namespaced name of the HelmChart resource created by the controller for the HelmRelease.", "type": "string"}, "installFailures": {"description": "InstallFailures is the install failure count against the latest desired state. It is reset after a successful reconciliation.", "format": "int64", "type": "integer"}, "lastAppliedRevision": {"description": "LastAppliedRevision is the revision of the last successfully applied source.", "type": "string"}, "lastAttemptedRevision": {"description": "LastAttemptedRevision is the revision of the last reconciliation attempt.", "type": "string"}, "lastAttemptedValuesChecksum": {"description": "LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last reconciliation attempt.", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastReleaseRevision": {"description": "LastReleaseRevision is the revision of the last successful Helm release.", "type": "integer"}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "upgradeFailures": {"description": "UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a successful reconciliation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpec": {"description": "HelmRepositorySpec defines the reference to a Helm repository.", "properties": {"accessFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecAccessfrom", "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object."}, "interval": {"description": "The interval at which to check the upstream for updates.", "type": "string"}, "passCredentials": {"description": "PassCredentials allows the credentials from the SecretRef to be passed on to a host that does not match the host as defined in URL. This may be required if the host of the advertised chart URLs in the index differ from the defined URL. Enabling this should be done with caution, as it can potentially result in credentials getting stolen in a MITM-attack.", "type": "boolean"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecSecretref", "description": "The name of the secret containing authentication credentials for the Helm repository. For HTTP/S basic auth the secret must contain username and password fields. For TLS the secret must contain a certFile and keyFile, and/or caCert fields."}, "suspend": {"description": "This flag tells the controller to suspend the reconciliation of this source.", "type": "boolean"}, "timeout": {"default": "60s", "description": "The timeout of index downloading, defaults to 60s.", "type": "string"}, "url": {"description": "The Helm repository URL, a valid URL contains at least a protocol and host.", "type": "string"}}, "required": ["interval", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatus": {"default": {"observedGeneration": -1}, "description": "HelmRepositoryStatus defines the observed state of the HelmRepository.", "properties": {"artifact": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatusArtifact", "description": "Artifact represents the output of the last successful repository sync."}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatusConditions", "description": "Conditions holds the conditions for the HelmRepository."}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "url": {"description": "URL is the download link for the last index fetched.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpec": {"description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy", "properties": {"filterTags": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecFiltertags", "description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared."}, "imageRepositoryRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecImagerepositoryref", "description": "ImageRepositoryRef points at the object specifying the image being scanned"}, "policy": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicy", "description": "Policy gives the particulars of the policy to be followed in selecting the most recent image"}}, "required": ["imageRepositoryRef", "policy"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicyStatus": {"description": "ImagePolicyStatus defines the observed state of ImagePolicy", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicyStatusConditions", "description": ""}, "latestImage": {"description": "LatestImage gives the first in the list of images scanned by the image repository, when filtered and ordered according to the policy.", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpec": {"description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy", "properties": {"filterTags": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecFiltertags", "description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared."}, "imageRepositoryRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecImagerepositoryref", "description": "ImageRepositoryRef points at the object specifying the image being scanned"}, "policy": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicy", "description": "Policy gives the particulars of the policy to be followed in selecting the most recent image"}}, "required": ["imageRepositoryRef", "policy"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicyStatus": {"description": "ImagePolicyStatus defines the observed state of ImagePolicy", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicyStatusConditions", "description": ""}, "latestImage": {"description": "LatestImage gives the first in the list of images scanned by the image repository, when filtered and ordered according to the policy.", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpec": {"description": "ImagePolicySpec defines the parameters for calculating the ImagePolicy", "properties": {"filterTags": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecFiltertags", "description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared."}, "imageRepositoryRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecImagerepositoryref", "description": "ImageRepositoryRef points at the object specifying the image being scanned"}, "policy": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicy", "description": "Policy gives the particulars of the policy to be followed in selecting the most recent image"}}, "required": ["imageRepositoryRef", "policy"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicyStatus": {"default": {"observedGeneration": -1}, "description": "ImagePolicyStatus defines the observed state of ImagePolicy", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicyStatusConditions", "description": ""}, "latestImage": {"description": "LatestImage gives the first in the list of images scanned by the image repository, when filtered and ordered according to the policy.", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpec": {"description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`.", "properties": {"certSecretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpecCertsecretref", "description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate."}, "image": {"description": "Image is the name of the image repository", "type": "string"}, "interval": {"description": "Interval is the length of time to wait between scans of the image repository.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpecSecretref", "description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent."}, "suspend": {"description": "This flag tells the controller to suspend subsequent image scans. It does not apply to already started scans. Defaults to false.", "type": "boolean"}, "timeout": {"description": "Timeout for image scanning. Defaults to 'Interval' duration.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatus": {"description": "ImageRepositoryStatus defines the observed state of ImageRepository", "properties": {"canonicalImageName": {"description": "CanonicalName is the name of the image repository with all the implied bits made explicit; e.g., `docker.io/library/alpine` rather than `alpine`.", "type": "string"}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatusConditions", "description": ""}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastScanResult": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatusLastscanresult", "description": "LastScanResult contains the number of fetched tags."}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpec": {"description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`.", "properties": {"certSecretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpecCertsecretref", "description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate."}, "image": {"description": "Image is the name of the image repository", "type": "string"}, "interval": {"description": "Interval is the length of time to wait between scans of the image repository.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpecSecretref", "description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent."}, "suspend": {"description": "This flag tells the controller to suspend subsequent image scans. It does not apply to already started scans. Defaults to false.", "type": "boolean"}, "timeout": {"description": "Timeout for image scanning. Defaults to 'Interval' duration.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatus": {"description": "ImageRepositoryStatus defines the observed state of ImageRepository", "properties": {"canonicalImageName": {"description": "CanonicalName is the name of the image repository with all the implied bits made explicit; e.g., `docker.io/library/alpine` rather than `alpine`.", "type": "string"}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatusConditions", "description": ""}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastScanResult": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatusLastscanresult", "description": "LastScanResult contains the number of fetched tags."}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpec": {"description": "ImageRepositorySpec defines the parameters for scanning an image repository, e.g., `fluxcd/flux`.", "properties": {"accessFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecAccessfrom", "description": "AccessFrom defines an ACL for allowing cross-namespace references to the ImageRepository object based on the caller's namespace labels."}, "certSecretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecCertsecretref", "description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate."}, "image": {"description": "Image is the name of the image repository", "type": "string"}, "interval": {"description": "Interval is the length of time to wait between scans of the image repository.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecSecretref", "description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent."}, "suspend": {"description": "This flag tells the controller to suspend subsequent image scans. It does not apply to already started scans. Defaults to false.", "type": "boolean"}, "timeout": {"description": "Timeout for image scanning. Defaults to 'Interval' duration.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatus": {"default": {"observedGeneration": -1}, "description": "ImageRepositoryStatus defines the observed state of ImageRepository", "properties": {"canonicalImageName": {"description": "CanonicalName is the name of the image repository with all the implied bits made explicit; e.g., `docker.io/library/alpine` rather than `alpine`.", "type": "string"}, "conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatusConditions", "description": ""}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastScanResult": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatusLastscanresult", "description": "LastScanResult contains the number of fetched tags."}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpec": {"description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation", "properties": {"checkout": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCheckout", "description": "Checkout gives the parameters for cloning the git repository, ready to make changes."}, "commit": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommit", "description": "Commit specifies how to commit to the git repository."}, "interval": {"description": "Interval gives an lower bound for how often the automation run should be attempted.", "type": "string"}, "push": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecPush", "description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch`."}, "suspend": {"description": "Suspend tells the controller to not run this automation, until it is unset (or set to false). Defaults to false.", "type": "boolean"}, "update": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecUpdate", "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value."}}, "required": ["checkout", "commit", "interval"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationStatus": {"description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationStatusConditions", "description": ""}, "lastAutomationRunTime": {"description": "LastAutomationRunTime records the last time the controller ran this automation through to completion (even if no updates were made).", "format": "date-time", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastPushCommit": {"description": "LastPushCommit records the SHA1 of the last commit made by the controller, for this automation object", "type": "string"}, "lastPushTime": {"description": "LastPushTime records the time of the last pushed change.", "format": "date-time", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpec": {"description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation", "properties": {"git": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGit", "description": "GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed."}, "interval": {"description": "Interval gives an lower bound for how often the automation run should be attempted.", "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecSourceref", "description": "SourceRef refers to the resource giving access details to a git repository."}, "suspend": {"description": "Suspend tells the controller to not run this automation, until it is unset (or set to false). Defaults to false.", "type": "boolean"}, "update": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecUpdate", "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value."}}, "required": ["interval", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationStatus": {"description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationStatusConditions", "description": ""}, "lastAutomationRunTime": {"description": "LastAutomationRunTime records the last time the controller ran this automation through to completion (even if no updates were made).", "format": "date-time", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastPushCommit": {"description": "LastPushCommit records the SHA1 of the last commit made by the controller, for this automation object", "type": "string"}, "lastPushTime": {"description": "LastPushTime records the time of the last pushed change.", "format": "date-time", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpec": {"description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation", "properties": {"git": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGit", "description": "GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed."}, "interval": {"description": "Interval gives an lower bound for how often the automation run should be attempted.", "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecSourceref", "description": "SourceRef refers to the resource giving access details to a git repository."}, "suspend": {"description": "Suspend tells the controller to not run this automation, until it is unset (or set to false). Defaults to false.", "type": "boolean"}, "update": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecUpdate", "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value."}}, "required": ["interval", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationStatus": {"default": {"observedGeneration": -1}, "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationStatusConditions", "description": ""}, "lastAutomationRunTime": {"description": "LastAutomationRunTime records the last time the controller ran this automation through to completion (even if no updates were made).", "format": "date-time", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "lastPushCommit": {"description": "LastPushCommit records the SHA1 of the last commit made by the controller, for this automation object", "type": "string"}, "lastPushTime": {"description": "LastPushTime records the time of the last pushed change.", "format": "date-time", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpec": {"description": "KustomizationSpec defines the desired state of a kustomization.", "properties": {"decryption": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDecryption", "description": "Decrypt Kubernetes secrets before applying them on the cluster."}, "dependsOn": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDependson", "description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to Kustomization resources that must be ready before this Kustomization can be reconciled."}, "force": {"default": false, "description": "Force instructs the controller to recreate resources when patching fails due to an immutable field change.", "type": "boolean"}, "healthChecks": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecHealthchecks", "description": "A list of resources to be included in the health assessment."}, "images": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecImages", "description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify."}, "interval": {"description": "The interval at which to reconcile the Kustomization.", "type": "string"}, "kubeConfig": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecKubeconfig", "description": "The KubeConfig for reconciling the Kustomization on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName."}, "patches": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatches", "description": "Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors."}, "patchesJson6902": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatchesjson6902", "description": "JSON 6902 patches, defined as inline YAML objects."}, "patchesStrategicMerge": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatchesstrategicmerge", "description": "Strategic merge patches, defined as inline YAML objects."}, "path": {"description": "Path to the directory containing the kustomization.yaml file, or the set of plain YAMLs a kustomization.yaml should be generated for. Defaults to 'None', which translates to the root path of the SourceRef.", "type": "string"}, "postBuild": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPostbuild", "description": "PostBuild describes which actions to perform on the YAML manifest generated by building the kustomize overlay."}, "prune": {"description": "Prune enables garbage collection.", "type": "boolean"}, "retryInterval": {"description": "The interval at which to retry a previously failed reconciliation. When not specified, the controller uses the KustomizationSpec.Interval value to retry failures.", "type": "string"}, "serviceAccountName": {"description": "The name of the Kubernetes service account to impersonate when reconciling this Kustomization.", "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecSourceref", "description": "Reference of the source where the kustomization file is."}, "suspend": {"description": "This flag tells the controller to suspend subsequent kustomize executions, it does not apply to already started executions. Defaults to false.", "type": "boolean"}, "targetNamespace": {"description": "TargetNamespace sets or overrides the namespace in the kustomization.yaml file.", "maxLength": 63, "minLength": 1, "type": "string"}, "timeout": {"description": "Timeout for validation, apply and health checking operations. Defaults to 'Interval' duration.", "type": "string"}, "validation": {"description": "Validate the Kubernetes objects before applying them on the cluster. The validation strategy can be 'client' (local dry-run), 'server' (APIServer dry-run) or 'none'. When 'Force' is 'true', validation will fallback to 'client' if set to 'server' because server-side validation is not supported in this scenario.", "enum": ["none", "client", "server"], "type": "string"}}, "required": ["interval", "prune", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatus": {"default": {"observedGeneration": -1}, "description": "KustomizationStatus defines the observed state of a kustomization.", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusConditions", "description": ""}, "lastAppliedRevision": {"description": "The last successfully applied revision. The revision format for Git sources is <branch|tag>/<commit-sha>.", "type": "string"}, "lastAttemptedRevision": {"description": "LastAttemptedRevision is the revision of the last reconciliation attempt.", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}, "snapshot": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusSnapshot", "description": "The last successfully applied revision metadata."}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpec": {"description": "KustomizationSpec defines the configuration to calculate the desired state from a Source using Kustomize.", "properties": {"decryption": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDecryption", "description": "Decrypt Kubernetes secrets before applying them on the cluster."}, "dependsOn": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDependson", "description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to Kustomization resources that must be ready before this Kustomization can be reconciled."}, "force": {"default": false, "description": "Force instructs the controller to recreate resources when patching fails due to an immutable field change.", "type": "boolean"}, "healthChecks": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecHealthchecks", "description": "A list of resources to be included in the health assessment."}, "images": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecImages", "description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify."}, "interval": {"description": "The interval at which to reconcile the Kustomization.", "type": "string"}, "kubeConfig": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecKubeconfig", "description": "The KubeConfig for reconciling the Kustomization on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName."}, "patches": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatches", "description": "Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors."}, "patchesJson6902": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatchesjson6902", "description": "JSON 6902 patches, defined as inline YAML objects. Deprecated: Use Patches instead."}, "patchesStrategicMerge": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatchesstrategicmerge", "description": "Strategic merge patches, defined as inline YAML objects. Deprecated: Use Patches instead."}, "path": {"description": "Path to the directory containing the kustomization.yaml file, or the set of plain YAMLs a kustomization.yaml should be generated for. Defaults to 'None', which translates to the root path of the SourceRef.", "type": "string"}, "postBuild": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPostbuild", "description": "PostBuild describes which actions to perform on the YAML manifest generated by building the kustomize overlay."}, "prune": {"description": "Prune enables garbage collection.", "type": "boolean"}, "retryInterval": {"description": "The interval at which to retry a previously failed reconciliation. When not specified, the controller uses the KustomizationSpec.Interval value to retry failures.", "type": "string"}, "serviceAccountName": {"description": "The name of the Kubernetes service account to impersonate when reconciling this Kustomization.", "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecSourceref", "description": "Reference of the source where the kustomization file is."}, "suspend": {"description": "This flag tells the controller to suspend subsequent kustomize executions, it does not apply to already started executions. Defaults to false.", "type": "boolean"}, "targetNamespace": {"description": "TargetNamespace sets or overrides the namespace in the kustomization.yaml file.", "maxLength": 63, "minLength": 1, "type": "string"}, "timeout": {"description": "Timeout for validation, apply and health checking operations. Defaults to 'Interval' duration.", "type": "string"}, "validation": {"description": "Deprecated: Not used in v1beta2.", "enum": ["none", "client", "server"], "type": "string"}, "wait": {"description": "Wait instructs the controller to check the health of all the reconciled resources. When enabled, the HealthChecks are ignored. Defaults to false.", "type": "boolean"}}, "required": ["interval", "prune", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatus": {"default": {"observedGeneration": -1}, "description": "KustomizationStatus defines the observed state of a kustomization.", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusConditions", "description": ""}, "inventory": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusInventory", "description": "Inventory contains the list of Kubernetes resource object references that have been successfully applied."}, "lastAppliedRevision": {"description": "The last successfully applied revision. The revision format for Git sources is <branch|tag>/<commit-sha>.", "type": "string"}, "lastAttemptedRevision": {"description": "LastAttemptedRevision is the revision of the last reconciliation attempt.", "type": "string"}, "lastHandledReconcileAt": {"description": "LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change can be detected.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ProviderSpec": {"description": "ProviderSpec defines the desired state of Provider", "properties": {"address": {"description": "HTTP/S webhook address of this provider", "pattern": "^(http|https)://", "type": "string"}, "certSecretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ProviderSpecCertsecretref", "description": "CertSecretRef can be given the name of a secret containing a PEM-encoded CA certificate (`caFile`)"}, "channel": {"description": "Alert channel for this provider", "type": "string"}, "proxy": {"description": "HTTP/S address of the proxy", "pattern": "^(http|https)://", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ProviderSpecSecretref", "description": "Secret reference containing the provider webhook URL using \"address\" as data key"}, "suspend": {"description": "This flag tells the controller to suspend subsequent events handling. Defaults to false.", "type": "boolean"}, "type": {"description": "Type of provider", "enum": ["slack", "discord", "msteams", "rocket", "generic", "github", "gitlab", "bitbucket", "azuredevops", "googlechat", "webex", "sentry", "azureeventhub", "telegram", "lark", "matrix", "opsgenie", "alertmanager", "grafana"], "type": "string"}, "username": {"description": "Bot username for this provider", "type": "string"}}, "required": ["type"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ProviderStatus": {"default": {"observedGeneration": -1}, "description": "ProviderStatus defines the observed state of Provider", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ProviderStatusConditions", "description": ""}, "observedGeneration": {"description": "ObservedGeneration is the last reconciled generation.", "format": "int64", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverSpec": {"description": "ReceiverSpec defines the desired state of Receiver", "properties": {"events": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecEvents", "description": "A list of events to handle, e.g. 'push' for GitHub or 'Push Hook' for GitLab."}, "resources": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecResources", "description": "A list of resources to be notified about changes."}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecSecretref", "description": "Secret reference containing the token used to validate the payload authenticity"}, "suspend": {"description": "This flag tells the controller to suspend subsequent events handling. Defaults to false.", "type": "boolean"}, "type": {"description": "Type of webhook sender, used to determine the validation procedure and payload deserialization.", "enum": ["generic", "generic-hmac", "github", "gitlab", "bitbucket", "harbor", "dockerhub", "quay", "gcr", "nexus", "acr"], "type": "string"}}, "required": ["resources", "type"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverStatus": {"default": {"observedGeneration": -1}, "description": "ReceiverStatus defines the observed state of Receiver", "properties": {"conditions": {"$ref": "#/definitions/io.fluxcd.toolkit.notification.v1beta1.ReceiverStatusConditions", "description": ""}, "observedGeneration": {"description": "ObservedGeneration is the last observed generation.", "format": "int64", "type": "integer"}, "url": {"description": "Generated webhook URL in the format of '/hook/sha256sum(token+name+namespace)'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.AlertSpecEventsources": {"description": "Filter events based on the involved objects.", "items": {"description": "CrossNamespaceObjectReference contains enough information to let you locate the typed referenced object at cluster level", "properties": {"apiVersion": {"description": "API version of the referent", "type": "string"}, "kind": {"description": "Kind of the referent", "enum": ["Bucket", "GitRepository", "Kustomization", "HelmRelease", "HelmChart", "HelmRepository", "ImageRepository", "ImagePolicy", "ImageUpdateAutomation"], "type": "string"}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}, "name": {"description": "Name of the referent", "maxLength": 53, "minLength": 1, "type": "string"}, "namespace": {"description": "Namespace of the referent", "maxLength": 53, "minLength": 1, "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.notification.v1beta1.AlertSpecExclusionlist": {"description": "A list of Golang regular expressions to be used for excluding messages.", "items": {"type": "string"}, "type": "array"}, "io.fluxcd.toolkit.notification.v1beta1.AlertSpecProviderref": {"description": "Send events using this provider.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.AlertStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.BucketSpecAccessfrom": {"description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.", "properties": {"namespaceSelectors": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.BucketSpecAccessfromNamespaceselectors", "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation."}}, "required": ["namespaceSelectors"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.BucketSpecSecretref": {"description": "The name of the secret containing authentication credentials for the Bucket.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.BucketStatusArtifact": {"description": "Artifact represents the output of the last successful Bucket sync.", "properties": {"checksum": {"description": "Checksum is the SHA256 checksum of the artifact.", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last update of this artifact.", "format": "date-time", "type": "string"}, "path": {"description": "Path is the relative file path of this artifact.", "type": "string"}, "revision": {"description": "Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.", "type": "string"}, "url": {"description": "URL is the HTTP address of this artifact.", "type": "string"}}, "required": ["path", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.BucketStatusConditions": {"description": "Conditions holds the conditions for the Bucket.", "items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecAccessfrom": {"description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.", "properties": {"namespaceSelectors": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecAccessfromNamespaceselectors", "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation."}}, "required": ["namespaceSelectors"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecInclude": {"description": "Extra git repositories to map into the repository", "items": {"description": "GitRepositoryInclude defines a source with a from and to path.", "properties": {"fromPath": {"description": "The path to copy contents from, defaults to the root directory.", "type": "string"}, "repository": {"description": "Reference to a GitRepository to include.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "toPath": {"description": "The path to copy contents to, defaults to the name of the source ref.", "type": "string"}}, "required": ["repository"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecRef": {"description": "The Git reference to checkout and monitor for changes, defaults to master branch.", "properties": {"branch": {"description": "The Git branch to checkout, defaults to master.", "type": "string"}, "commit": {"description": "The Git commit SHA to checkout, if specified Tag filters will be ignored.", "type": "string"}, "semver": {"description": "The Git tag semver expression, takes precedence over Tag.", "type": "string"}, "tag": {"description": "The Git tag to checkout, takes precedence over Branch.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecSecretref": {"description": "The secret name containing the Git credentials. For HTTPS repositories the secret must contain username and password fields. For SSH repositories the secret must contain identity, identity.pub and known_hosts fields.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecVerify": {"description": "Verify OpenPGP signature for the Git commit HEAD points to.", "properties": {"mode": {"description": "Mode describes what git object should be verified, currently ('head').", "enum": ["head"], "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecVerifySecretref", "description": "The secret name containing the public keys of all trusted Git authors."}}, "required": ["mode"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusArtifact": {"description": "Artifact represents the output of the last successful repository sync.", "properties": {"checksum": {"description": "Checksum is the SHA256 checksum of the artifact.", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last update of this artifact.", "format": "date-time", "type": "string"}, "path": {"description": "Path is the relative file path of this artifact.", "type": "string"}, "revision": {"description": "Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.", "type": "string"}, "url": {"description": "URL is the HTTP address of this artifact.", "type": "string"}}, "required": ["path", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusConditions": {"description": "Conditions holds the conditions for the GitRepository.", "items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositoryStatusIncludedartifacts": {"description": "IncludedArtifacts represents the included artifacts from the last successful repository sync.", "items": {"description": "Artifact represents the output of a source synchronisation.", "properties": {"checksum": {"description": "Checksum is the SHA256 checksum of the artifact.", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last update of this artifact.", "format": "date-time", "type": "string"}, "path": {"description": "Path is the relative file path of this artifact.", "type": "string"}, "revision": {"description": "Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.", "type": "string"}, "url": {"description": "URL is the HTTP address of this artifact.", "type": "string"}}, "required": ["path", "url"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartSpecAccessfrom": {"description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.", "properties": {"namespaceSelectors": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmChartSpecAccessfromNamespaceselectors", "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation."}}, "required": ["namespaceSelectors"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartSpecSourceref": {"description": "The reference to the Source the chart is available at.", "properties": {"apiVersion": {"description": "APIVersion of the referent.", "type": "string"}, "kind": {"description": "Kind of the referent, valid values are ('HelmRepository', 'GitRepository', 'Bucket').", "enum": ["HelmRepository", "GitRepository", "Bucket"], "type": "string"}, "name": {"description": "Name of the referent.", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartSpecValuesfiles": {"description": "Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.", "items": {"type": "string"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartStatusArtifact": {"description": "Artifact represents the output of the last successful chart sync.", "properties": {"checksum": {"description": "Checksum is the SHA256 checksum of the artifact.", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last update of this artifact.", "format": "date-time", "type": "string"}, "path": {"description": "Path is the relative file path of this artifact.", "type": "string"}, "revision": {"description": "Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.", "type": "string"}, "url": {"description": "URL is the HTTP address of this artifact.", "type": "string"}}, "required": ["path", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartStatusConditions": {"description": "Conditions holds the conditions for the HelmChart.", "items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChart": {"description": "Chart defines the template of the v1beta1.HelmChart that should be created for this HelmRelease.", "properties": {"spec": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpec", "description": "Spec holds the template for the v1beta1.HelmChartSpec for this HelmRelease."}}, "required": ["spec"], "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecDependson": {"description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.", "items": {"description": "CrossNamespaceDependencyReference holds the reference to a dependency.", "properties": {"name": {"description": "Name holds the name reference of a dependency.", "type": "string"}, "namespace": {"description": "Namespace holds the namespace reference of a dependency.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecInstall": {"description": "Install holds the configuration for Helm install actions for this HelmRelease.", "properties": {"crds": {"description": "CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated. \n Skip: do neither install nor replace (update) any CRDs. \n Create: new CRDs are created, existing CRDs are neither updated nor deleted. \n CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted. \n By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.", "enum": ["Skip", "Create", "CreateReplace"], "type": "string"}, "createNamespace": {"description": "CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.", "type": "boolean"}, "disableHooks": {"description": "DisableHooks prevents hooks from running during the Helm install action.", "type": "boolean"}, "disableOpenAPIValidation": {"description": "DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.", "type": "boolean"}, "disableWait": {"description": "DisableWait disables the waiting for resources to be ready after a Helm install has been performed.", "type": "boolean"}, "disableWaitForJobs": {"description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.", "type": "boolean"}, "remediation": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecInstallRemediation", "description": "Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action."}, "replace": {"description": "Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.", "type": "boolean"}, "skipCRDs": {"description": "SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present. \n Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecKubeconfig": {"description": "KubeConfig for reconciling the HelmRelease on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName.", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecKubeconfigSecretref", "description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease."}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecPostrenderers": {"description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.", "items": {"description": "PostRenderer contains a Helm PostRenderer specification.", "properties": {"kustomize": {"description": "Kustomization to apply as PostRenderer.", "properties": {"images": {"description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.", "items": {"description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.", "properties": {"digest": {"description": "Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.", "type": "string"}, "name": {"description": "Name is a tag-less image name.", "type": "string"}, "newName": {"description": "NewName is the value used to replace the original name.", "type": "string"}, "newTag": {"description": "NewTag is the value used to replace the original tag.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "patchesJson6902": {"description": "JSON 6902 patches, defined as inline YAML objects.", "items": {"description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.", "properties": {"patch": {"description": "Patch contains the JSON6902 patch document with an array of operation objects.", "items": {"description": "JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4", "properties": {"from": {"description": "From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "type": "string"}, "op": {"description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\". https://datatracker.ietf.org/doc/html/rfc6902#section-4", "enum": ["test", "remove", "add", "replace", "move", "copy"], "type": "string"}, "path": {"description": "Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.", "type": "string"}, "value": {"description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["op", "path"], "type": "object"}, "type": "array"}, "target": {"description": "Target points to the resources that the patch document should be applied to.", "properties": {"annotationSelector": {"description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.", "type": "string"}, "group": {"description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "kind": {"description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "labelSelector": {"description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.", "type": "string"}, "name": {"description": "Name to match resources with.", "type": "string"}, "namespace": {"description": "Namespace to select resources from.", "type": "string"}, "version": {"description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}}, "type": "object"}}, "required": ["patch", "target"], "type": "object"}, "type": "array"}, "patchesStrategicMerge": {"description": "Strategic merge patches, defined as inline YAML objects.", "items": {"x-kubernetes-preserve-unknown-fields": true}, "type": "array"}}, "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecRollback": {"description": "Rollback holds the configuration for Helm rollback actions for this HelmRelease.", "properties": {"cleanupOnFail": {"description": "CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.", "type": "boolean"}, "disableHooks": {"description": "DisableHooks prevents hooks from running during the Helm rollback action.", "type": "boolean"}, "disableWait": {"description": "DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.", "type": "boolean"}, "disableWaitForJobs": {"description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.", "type": "boolean"}, "force": {"description": "Force forces resource updates through a replacement strategy.", "type": "boolean"}, "recreate": {"description": "Recreate performs pod restarts for the resource if applicable.", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecTest": {"description": "Test holds the configuration for Helm test actions for this HelmRelease.", "properties": {"enable": {"description": "Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.", "type": "boolean"}, "ignoreFailures": {"description": "IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUninstall": {"description": "Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.", "properties": {"disableHooks": {"description": "DisableHooks prevents hooks from running during the Helm rollback action.", "type": "boolean"}, "disableWait": {"description": "DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is performed.", "type": "boolean"}, "keepHistory": {"description": "KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUpgrade": {"description": "Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.", "properties": {"cleanupOnFail": {"description": "CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.", "type": "boolean"}, "crds": {"description": "CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded. \n Skip: do neither install nor replace (update) any CRDs. \n Create: new CRDs are created, existing CRDs are neither updated nor deleted. \n CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted. \n By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.", "enum": ["Skip", "Create", "CreateReplace"], "type": "string"}, "disableHooks": {"description": "DisableHooks prevents hooks from running during the Helm upgrade action.", "type": "boolean"}, "disableOpenAPIValidation": {"description": "DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.", "type": "boolean"}, "disableWait": {"description": "DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.", "type": "boolean"}, "disableWaitForJobs": {"description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.", "type": "boolean"}, "force": {"description": "Force forces resource updates through a replacement strategy.", "type": "boolean"}, "preserveValues": {"description": "PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.", "type": "boolean"}, "remediation": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUpgradeRemediation", "description": "Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action."}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecValuesfrom": {"description": "ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.", "items": {"description": "ValuesReference contains a reference to a resource containing Helm values, and optionally the key they can be found at.", "properties": {"kind": {"description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').", "enum": ["Secret", "ConfigMap"], "type": "string"}, "name": {"description": "Name of the values referent. Should reside in the same namespace as the referring resource.", "maxLength": 253, "minLength": 1, "type": "string"}, "optional": {"description": "Optional marks this ValuesReference as optional. When set, a not found error for the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.", "type": "boolean"}, "targetPath": {"description": "TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.", "type": "string"}, "valuesKey": {"description": "ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'.", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseStatusConditions": {"description": "Conditions holds the conditions for the HelmRelease.", "items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecAccessfrom": {"description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.", "properties": {"namespaceSelectors": {"$ref": "#/definitions/io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecAccessfromNamespaceselectors", "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation."}}, "required": ["namespaceSelectors"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecSecretref": {"description": "The name of the secret containing authentication credentials for the Helm repository. For HTTP/S basic auth the secret must contain username and password fields. For TLS the secret must contain a certFile and keyFile, and/or caCert fields.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatusArtifact": {"description": "Artifact represents the output of the last successful repository sync.", "properties": {"checksum": {"description": "Checksum is the SHA256 checksum of the artifact.", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last update of this artifact.", "format": "date-time", "type": "string"}, "path": {"description": "Path is the relative file path of this artifact.", "type": "string"}, "revision": {"description": "Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.", "type": "string"}, "url": {"description": "URL is the HTTP address of this artifact.", "type": "string"}}, "required": ["path", "url"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositoryStatusConditions": {"description": "Conditions holds the conditions for the HelmRepository.", "items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecFiltertags": {"description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared.", "properties": {"extract": {"description": "Extract allows a capture group to be extracted from the specified regular expression pattern, useful before tag evaluation.", "type": "string"}, "pattern": {"description": "Pattern specifies a regular expression pattern used to filter for image tags.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecImagerepositoryref": {"description": "ImageRepositoryRef points at the object specifying the image being scanned", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicy": {"description": "Policy gives the particulars of the policy to be followed in selecting the most recent image", "properties": {"alphabetical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicyAlphabetical", "description": "Alphabetical set of rules to use for alphabetical ordering of the tags."}, "numerical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicyNumerical", "description": "Numerical set of rules to use for numerical ordering of the tags."}, "semver": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicySemver", "description": "SemVer gives a semantic version range to check against the tags available."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicyStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecFiltertags": {"description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared.", "properties": {"extract": {"description": "Extract allows a capture group to be extracted from the specified regular expression pattern, useful before tag evaluation.", "type": "string"}, "pattern": {"description": "Pattern specifies a regular expression pattern used to filter for image tags.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecImagerepositoryref": {"description": "ImageRepositoryRef points at the object specifying the image being scanned", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicy": {"description": "Policy gives the particulars of the policy to be followed in selecting the most recent image", "properties": {"alphabetical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicyAlphabetical", "description": "Alphabetical set of rules to use for alphabetical ordering of the tags."}, "numerical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicyNumerical", "description": "Numerical set of rules to use for numerical ordering of the tags."}, "semver": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicySemver", "description": "SemVer gives a semantic version range to check against the tags available."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicyStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecFiltertags": {"description": "FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared.", "properties": {"extract": {"description": "Extract allows a capture group to be extracted from the specified regular expression pattern, useful before tag evaluation.", "type": "string"}, "pattern": {"description": "Pattern specifies a regular expression pattern used to filter for image tags.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecImagerepositoryref": {"description": "ImageRepositoryRef points at the object specifying the image being scanned", "properties": {"name": {"description": "Name of the referent", "type": "string"}, "namespace": {"description": "Namespace of the referent, when not specified it acts as LocalObjectReference", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicy": {"description": "Policy gives the particulars of the policy to be followed in selecting the most recent image", "properties": {"alphabetical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicyAlphabetical", "description": "Alphabetical set of rules to use for alphabetical ordering of the tags."}, "numerical": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicyNumerical", "description": "Numerical set of rules to use for numerical ordering of the tags."}, "semver": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicySemver", "description": "SemVer gives a semantic version range to check against the tags available."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicyStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpecCertsecretref": {"description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositorySpecSecretref": {"description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImageRepositoryStatusLastscanresult": {"description": "LastScanResult contains the number of fetched tags.", "properties": {"scanTime": {"format": "date-time", "type": "string"}, "tagCount": {"type": "integer"}}, "required": ["tagCount"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpecCertsecretref": {"description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositorySpecSecretref": {"description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha2.ImageRepositoryStatusLastscanresult": {"description": "LastScanResult contains the number of fetched tags.", "properties": {"scanTime": {"format": "date-time", "type": "string"}, "tagCount": {"type": "integer"}}, "required": ["tagCount"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecAccessfrom": {"description": "AccessFrom defines an ACL for allowing cross-namespace references to the ImageRepository object based on the caller's namespace labels.", "properties": {"namespaceSelectors": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecAccessfromNamespaceselectors", "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation."}}, "required": ["namespaceSelectors"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecCertsecretref": {"description": "CertSecretRef can be given the name of a secret containing either or both of \n  - a PEM-encoded client certificate (`certFile`) and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`) \n  and whichever are supplied, will be used for connecting to the  registry. The client cert and key are useful if you are  authenticating with a certificate; the CA cert is useful if  you are using a self-signed server certificate.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecSecretref": {"description": "SecretRef can be given the name of a secret containing credentials to use for the image registry. The secret should be created with `kubectl create secret docker-registry`, or the equivalent.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositoryStatusLastscanresult": {"description": "LastScanResult contains the number of fetched tags.", "properties": {"scanTime": {"format": "date-time", "type": "string"}, "tagCount": {"type": "integer"}}, "required": ["tagCount"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCheckout": {"description": "Checkout gives the parameters for cloning the git repository, ready to make changes.", "properties": {"branch": {"description": "Branch gives the branch to clone from the git repository. If `.spec.push` is not supplied, commits will also be pushed to this branch.", "type": "string"}, "gitRepositoryRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCheckoutGitrepositoryref", "description": "GitRepositoryRef refers to the resource giving access details to a git repository to update files in."}}, "required": ["branch", "gitRepositoryRef"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommit": {"description": "Commit specifies how to commit to the git repository.", "properties": {"authorEmail": {"description": "AuthorEmail gives the email to provide when making a commit", "type": "string"}, "authorName": {"description": "AuthorName gives the name to provide when making a commit", "type": "string"}, "messageTemplate": {"description": "MessageTemplate provides a template for the commit message, into which will be interpolated the details of the change made.", "type": "string"}, "signingKey": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommitSigningkey", "description": "SigningKey provides the option to sign commits with a GPG key"}}, "required": ["authorEmail", "authorName"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecPush": {"description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch`.", "properties": {"branch": {"description": "Branch specifies that commits should be pushed to the branch named. The branch is created using `.spec.checkout.branch` as the starting point, if it doesn't already exist.", "type": "string"}}, "required": ["branch"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecUpdate": {"default": {"strategy": "Setters"}, "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value.", "properties": {"path": {"description": "Path to the directory containing the manifests to be updated. Defaults to 'None', which translates to the root path of the GitRepositoryRef.", "type": "string"}, "strategy": {"default": "Setters", "description": "Strategy names the strategy to be used.", "enum": ["Setters"], "type": "string"}}, "required": ["strategy"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGit": {"description": "GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed.", "properties": {"checkout": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCheckout", "description": "Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used."}, "commit": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommit", "description": "Commit specifies how to commit to the git repository."}, "push": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitPush", "description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default."}}, "required": ["commit"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecSourceref": {"description": "SourceRef refers to the resource giving access details to a git repository.", "properties": {"apiVersion": {"description": "API version of the referent", "type": "string"}, "kind": {"default": "GitRepository", "description": "Kind of the referent", "enum": ["GitRepository"], "type": "string"}, "name": {"description": "Name of the referent", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecUpdate": {"default": {"strategy": "Setters"}, "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value.", "properties": {"path": {"description": "Path to the directory containing the manifests to be updated. Defaults to 'None', which translates to the root path of the GitRepositoryRef.", "type": "string"}, "strategy": {"default": "Setters", "description": "Strategy names the strategy to be used.", "enum": ["Setters"], "type": "string"}}, "required": ["strategy"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGit": {"description": "GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed.", "properties": {"checkout": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCheckout", "description": "Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used."}, "commit": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommit", "description": "Commit specifies how to commit to the git repository."}, "push": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitPush", "description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default."}}, "required": ["commit"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecSourceref": {"description": "SourceRef refers to the resource giving access details to a git repository.", "properties": {"apiVersion": {"description": "API version of the referent.", "type": "string"}, "kind": {"default": "GitRepository", "description": "Kind of the referent.", "enum": ["GitRepository"], "type": "string"}, "name": {"description": "Name of the referent.", "type": "string"}, "namespace": {"description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecUpdate": {"default": {"strategy": "Setters"}, "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value.", "properties": {"path": {"description": "Path to the directory containing the manifests to be updated. Defaults to 'None', which translates to the root path of the GitRepositoryRef.", "type": "string"}, "strategy": {"default": "Setters", "description": "Strategy names the strategy to be used.", "enum": ["Setters"], "type": "string"}}, "required": ["strategy"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDecryption": {"description": "Decrypt Kubernetes secrets before applying them on the cluster.", "properties": {"provider": {"description": "Provider is the name of the decryption engine.", "enum": ["sops"], "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDecryptionSecretref", "description": "The secret name containing the private OpenPGP keys used for decryption."}}, "required": ["provider"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDependson": {"description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to Kustomization resources that must be ready before this Kustomization can be reconciled.", "items": {"description": "CrossNamespaceDependencyReference holds the reference to a dependency.", "properties": {"name": {"description": "Name holds the name reference of a dependency.", "type": "string"}, "namespace": {"description": "Namespace holds the namespace reference of a dependency.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecHealthchecks": {"description": "A list of resources to be included in the health assessment.", "items": {"description": "NamespacedObjectKindReference contains enough information to let you locate the typed referenced object in any namespace", "properties": {"apiVersion": {"description": "API version of the referent, if not specified the Kubernetes preferred version will be used", "type": "string"}, "kind": {"description": "Kind of the referent", "type": "string"}, "name": {"description": "Name of the referent", "type": "string"}, "namespace": {"description": "Namespace of the referent, when not specified it acts as LocalObjectReference", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecImages": {"description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.", "items": {"description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.", "properties": {"digest": {"description": "Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.", "type": "string"}, "name": {"description": "Name is a tag-less image name.", "type": "string"}, "newName": {"description": "NewName is the value used to replace the original name.", "type": "string"}, "newTag": {"description": "NewTag is the value used to replace the original tag.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecKubeconfig": {"description": "The KubeConfig for reconciling the Kustomization on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName.", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecKubeconfigSecretref", "description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the Kustomization. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the Kustomization."}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatches": {"description": "Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.", "items": {"description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.", "properties": {"patch": {"description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.", "type": "string"}, "target": {"description": "Target points to the resources that the patch document should be applied to.", "properties": {"annotationSelector": {"description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.", "type": "string"}, "group": {"description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "kind": {"description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "labelSelector": {"description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.", "type": "string"}, "name": {"description": "Name to match resources with.", "type": "string"}, "namespace": {"description": "Namespace to select resources from.", "type": "string"}, "version": {"description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatchesjson6902": {"description": "JSON 6902 patches, defined as inline YAML objects.", "items": {"description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.", "properties": {"patch": {"description": "Patch contains the JSON6902 patch document with an array of operation objects.", "items": {"description": "JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4", "properties": {"from": {"description": "From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "type": "string"}, "op": {"description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\". https://datatracker.ietf.org/doc/html/rfc6902#section-4", "enum": ["test", "remove", "add", "replace", "move", "copy"], "type": "string"}, "path": {"description": "Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.", "type": "string"}, "value": {"description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["op", "path"], "type": "object"}, "type": "array"}, "target": {"description": "Target points to the resources that the patch document should be applied to.", "properties": {"annotationSelector": {"description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.", "type": "string"}, "group": {"description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "kind": {"description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "labelSelector": {"description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.", "type": "string"}, "name": {"description": "Name to match resources with.", "type": "string"}, "namespace": {"description": "Namespace to select resources from.", "type": "string"}, "version": {"description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}}, "type": "object"}}, "required": ["patch", "target"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPatchesstrategicmerge": {"description": "Strategic merge patches, defined as inline YAML objects.", "items": {"x-kubernetes-preserve-unknown-fields": true}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPostbuild": {"description": "PostBuild describes which actions to perform on the YAML manifest generated by building the kustomize overlay.", "properties": {"substitute": {"additionalProperties": {"type": "string"}, "description": "Substitute holds a map of key/value pairs. The variables defined in your YAML manifests that match any of the keys defined in the map will be substituted with the set value. Includes support for bash string replacement functions e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.", "type": "object"}, "substituteFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPostbuildSubstitutefrom", "description": "SubstituteFrom holds references to ConfigMaps and Secrets containing the variables and their values to be substituted in the YAML manifests. The ConfigMap and the Secret data keys represent the var names and they must match the vars declared in the manifests for the substitution to happen."}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecSourceref": {"description": "Reference of the source where the kustomization file is.", "properties": {"apiVersion": {"description": "API version of the referent", "type": "string"}, "kind": {"description": "Kind of the referent", "enum": ["GitRepository", "Bucket"], "type": "string"}, "name": {"description": "Name of the referent", "type": "string"}, "namespace": {"description": "Namespace of the referent, defaults to the Kustomization namespace", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusSnapshot": {"description": "The last successfully applied revision metadata.", "properties": {"checksum": {"description": "The manifests sha1 checksum.", "type": "string"}, "entries": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusSnapshotEntries", "description": "A list of Kubernetes kinds grouped by namespace."}}, "required": ["checksum", "entries"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDecryption": {"description": "Decrypt Kubernetes secrets before applying them on the cluster.", "properties": {"provider": {"description": "Provider is the name of the decryption engine.", "enum": ["sops"], "type": "string"}, "secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDecryptionSecretref", "description": "The secret name containing the private OpenPGP keys used for decryption."}}, "required": ["provider"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDependson": {"description": "DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to Kustomization resources that must be ready before this Kustomization can be reconciled.", "items": {"description": "CrossNamespaceDependencyReference holds the reference to a dependency.", "properties": {"name": {"description": "Name holds the name reference of a dependency.", "type": "string"}, "namespace": {"description": "Namespace holds the namespace reference of a dependency.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecHealthchecks": {"description": "A list of resources to be included in the health assessment.", "items": {"description": "NamespacedObjectKindReference contains enough information to let you locate the typed referenced object in any namespace", "properties": {"apiVersion": {"description": "API version of the referent, if not specified the Kubernetes preferred version will be used", "type": "string"}, "kind": {"description": "Kind of the referent", "type": "string"}, "name": {"description": "Name of the referent", "type": "string"}, "namespace": {"description": "Namespace of the referent, when not specified it acts as LocalObjectReference", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecImages": {"description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.", "items": {"description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.", "properties": {"digest": {"description": "Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.", "type": "string"}, "name": {"description": "Name is a tag-less image name.", "type": "string"}, "newName": {"description": "NewName is the value used to replace the original name.", "type": "string"}, "newTag": {"description": "NewTag is the value used to replace the original tag.", "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecKubeconfig": {"description": "The KubeConfig for reconciling the Kustomization on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName.", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecKubeconfigSecretref", "description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the Kustomization. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the Kustomization."}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatches": {"description": "Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.", "items": {"description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.", "properties": {"patch": {"description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.", "type": "string"}, "target": {"description": "Target points to the resources that the patch document should be applied to.", "properties": {"annotationSelector": {"description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.", "type": "string"}, "group": {"description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "kind": {"description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "labelSelector": {"description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.", "type": "string"}, "name": {"description": "Name to match resources with.", "type": "string"}, "namespace": {"description": "Namespace to select resources from.", "type": "string"}, "version": {"description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatchesjson6902": {"description": "JSON 6902 patches, defined as inline YAML objects. Deprecated: Use Patches instead.", "items": {"description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.", "properties": {"patch": {"description": "Patch contains the JSON6902 patch document with an array of operation objects.", "items": {"description": "JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4", "properties": {"from": {"description": "From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "type": "string"}, "op": {"description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\". https://datatracker.ietf.org/doc/html/rfc6902#section-4", "enum": ["test", "remove", "add", "replace", "move", "copy"], "type": "string"}, "path": {"description": "Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.", "type": "string"}, "value": {"description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["op", "path"], "type": "object"}, "type": "array"}, "target": {"description": "Target points to the resources that the patch document should be applied to.", "properties": {"annotationSelector": {"description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.", "type": "string"}, "group": {"description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "kind": {"description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}, "labelSelector": {"description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.", "type": "string"}, "name": {"description": "Name to match resources with.", "type": "string"}, "namespace": {"description": "Namespace to select resources from.", "type": "string"}, "version": {"description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md", "type": "string"}}, "type": "object"}}, "required": ["patch", "target"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPatchesstrategicmerge": {"description": "Strategic merge patches, defined as inline YAML objects. Deprecated: Use Patches instead.", "items": {"x-kubernetes-preserve-unknown-fields": true}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPostbuild": {"description": "PostBuild describes which actions to perform on the YAML manifest generated by building the kustomize overlay.", "properties": {"substitute": {"additionalProperties": {"type": "string"}, "description": "Substitute holds a map of key/value pairs. The variables defined in your YAML manifests that match any of the keys defined in the map will be substituted with the set value. Includes support for bash string replacement functions e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.", "type": "object"}, "substituteFrom": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPostbuildSubstitutefrom", "description": "SubstituteFrom holds references to ConfigMaps and Secrets containing the variables and their values to be substituted in the YAML manifests. The ConfigMap and the Secret data keys represent the var names and they must match the vars declared in the manifests for the substitution to happen."}}, "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecSourceref": {"description": "Reference of the source where the kustomization file is.", "properties": {"apiVersion": {"description": "API version of the referent.", "type": "string"}, "kind": {"description": "Kind of the referent.", "enum": ["GitRepository", "Bucket"], "type": "string"}, "name": {"description": "Name of the referent.", "type": "string"}, "namespace": {"description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.", "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusInventory": {"description": "Inventory contains the list of Kubernetes resource object references that have been successfully applied.", "properties": {"entries": {"$ref": "#/definitions/io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusInventoryEntries", "description": "Entries of Kubernetes resource object references."}}, "required": ["entries"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ProviderSpecCertsecretref": {"description": "CertSecretRef can be given the name of a secret containing a PEM-encoded CA certificate (`caFile`)", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ProviderSpecSecretref": {"description": "Secret reference containing the provider webhook URL using \"address\" as data key", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ProviderStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecEvents": {"description": "A list of events to handle, e.g. 'push' for GitHub or 'Push Hook' for GitLab.", "items": {"type": "string"}, "type": "array"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecResources": {"description": "A list of resources to be notified about changes.", "items": {"description": "CrossNamespaceObjectReference contains enough information to let you locate the typed referenced object at cluster level", "properties": {"apiVersion": {"description": "API version of the referent", "type": "string"}, "kind": {"description": "Kind of the referent", "enum": ["Bucket", "GitRepository", "Kustomization", "HelmRelease", "HelmChart", "HelmRepository", "ImageRepository", "ImagePolicy", "ImageUpdateAutomation"], "type": "string"}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}, "name": {"description": "Name of the referent", "maxLength": 53, "minLength": 1, "type": "string"}, "namespace": {"description": "Namespace of the referent", "maxLength": 53, "minLength": 1, "type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverSpecSecretref": {"description": "Secret reference containing the token used to validate the payload authenticity", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.notification.v1beta1.ReceiverStatusConditions": {"items": {"description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", "properties": {"lastTransitionTime": {"description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", "format": "date-time", "type": "string"}, "message": {"description": "message is a human readable message indicating details about the transition. This may be an empty string.", "maxLength": 32768, "type": "string"}, "observedGeneration": {"description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", "format": "int64", "minimum": 0, "type": "integer"}, "reason": {"description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", "maxLength": 1024, "minLength": 1, "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", "type": "string"}, "status": {"description": "status of the condition, one of True, False, Unknown.", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", "maxLength": 316, "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", "type": "string"}}, "required": ["lastTransitionTime", "message", "reason", "status", "type"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.BucketSpecAccessfromNamespaceselectors": {"description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation.", "items": {"description": "NamespaceSelector selects the namespaces to which this ACL applies. An empty map of MatchLabels matches all namespaces in a cluster.", "properties": {"matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecAccessfromNamespaceselectors": {"description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation.", "items": {"description": "NamespaceSelector selects the namespaces to which this ACL applies. An empty map of MatchLabels matches all namespaces in a cluster.", "properties": {"matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.source.v1beta1.GitRepositorySpecVerifySecretref": {"description": "The secret name containing the public keys of all trusted Git authors.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmChartSpecAccessfromNamespaceselectors": {"description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation.", "items": {"description": "NamespaceSelector selects the namespaces to which this ACL applies. An empty map of MatchLabels matches all namespaces in a cluster.", "properties": {"matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpec": {"description": "Spec holds the template for the v1beta1.HelmChartSpec for this HelmRelease.", "properties": {"chart": {"description": "The name or path the Helm chart is available at in the SourceRef.", "type": "string"}, "interval": {"description": "Interval at which to check the v1beta1.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.", "type": "string"}, "reconcileStrategy": {"default": "ChartVersion", "description": "Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.", "enum": ["ChartVersion", "Revision"], "type": "string"}, "sourceRef": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpecSourceref", "description": "The name and namespace of the v1beta1.Source the chart is available at."}, "valuesFile": {"description": "Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.", "type": "string"}, "valuesFiles": {"$ref": "#/definitions/io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpecValuesfiles", "description": "Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted."}, "version": {"default": "*", "description": "Version semver expression, ignored for charts from v1beta1.GitRepository and v1beta1.Bucket sources. Defaults to latest when omitted.", "type": "string"}}, "required": ["chart", "sourceRef"], "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecInstallRemediation": {"description": "Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.", "properties": {"ignoreTestFailures": {"description": "IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.", "type": "boolean"}, "remediateLastFailure": {"description": "RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.", "type": "boolean"}, "retries": {"description": "Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.", "type": "integer"}}, "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecKubeconfigSecretref": {"description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecUpgradeRemediation": {"description": "Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.", "properties": {"ignoreTestFailures": {"description": "IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.", "type": "boolean"}, "remediateLastFailure": {"description": "RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.", "type": "boolean"}, "retries": {"description": "Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.", "type": "integer"}, "strategy": {"description": "Strategy to use for failure remediation. Defaults to 'rollback'.", "enum": ["rollback", "uninstall"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.source.v1beta1.HelmRepositorySpecAccessfromNamespaceselectors": {"description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation.", "items": {"description": "NamespaceSelector selects the namespaces to which this ACL applies. An empty map of MatchLabels matches all namespaces in a cluster.", "properties": {"matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicyAlphabetical": {"description": "Alphabetical set of rules to use for alphabetical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the letters of the alphabet as tags, ascending order would select Z, and descending order would select A.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicyNumerical": {"description": "Numerical set of rules to use for numerical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the integer values from 0 to 9 as tags, ascending order would select 9, and descending order would select 0.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImagePolicySpecPolicySemver": {"description": "SemVer gives a semantic version range to check against the tags available.", "properties": {"range": {"description": "Range gives a semver range for the image tag; the highest version within the range that's a tag yields the latest image.", "type": "string"}}, "required": ["range"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicyAlphabetical": {"description": "Alphabetical set of rules to use for alphabetical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the letters of the alphabet as tags, ascending order would select Z, and descending order would select A.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicyNumerical": {"description": "Numerical set of rules to use for numerical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the integer values from 0 to 9 as tags, ascending order would select 9, and descending order would select 0.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImagePolicySpecPolicySemver": {"description": "SemVer gives a semantic version range to check against the tags available.", "properties": {"range": {"description": "Range gives a semver range for the image tag; the highest version within the range that's a tag yields the latest image.", "type": "string"}}, "required": ["range"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicyAlphabetical": {"description": "Alphabetical set of rules to use for alphabetical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the letters of the alphabet as tags, ascending order would select Z, and descending order would select A.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicyNumerical": {"description": "Numerical set of rules to use for numerical ordering of the tags.", "properties": {"order": {"default": "asc", "description": "Order specifies the sorting order of the tags. Given the integer values from 0 to 9 as tags, ascending order would select 9, and descending order would select 0.", "enum": ["asc", "desc"], "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImagePolicySpecPolicySemver": {"description": "SemVer gives a semantic version range to check against the tags available.", "properties": {"range": {"description": "Range gives a semver range for the image tag; the highest version within the range that's a tag yields the latest image.", "type": "string"}}, "required": ["range"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageRepositorySpecAccessfromNamespaceselectors": {"description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies. Items in this list are evaluated using a logical OR operation.", "items": {"description": "NamespaceSelector selects the namespaces to which this ACL applies. An empty map of MatchLabels matches all namespaces in a cluster.", "properties": {"matchLabels": {"additionalProperties": {"type": "string"}, "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCheckoutGitrepositoryref": {"description": "GitRepositoryRef refers to the resource giving access details to a git repository to update files in.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommitSigningkey": {"description": "SigningKey provides the option to sign commits with a GPG key", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommitSigningkeySecretref", "description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCheckout": {"description": "Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used.", "properties": {"ref": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCheckoutRef", "description": "Reference gives a branch, tag or commit to clone from the Git repository."}}, "required": ["ref"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommit": {"description": "Commit specifies how to commit to the git repository.", "properties": {"author": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitAuthor", "description": "Author gives the email and optionally the name to use as the author of commits."}, "messageTemplate": {"description": "MessageTemplate provides a template for the commit message, into which will be interpolated the details of the change made.", "type": "string"}, "signingKey": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitSigningkey", "description": "SigningKey provides the option to sign commits with a GPG key"}}, "required": ["author"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitPush": {"description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default.", "properties": {"branch": {"description": "Branch specifies that commits should be pushed to the branch named. The branch is created using `.spec.checkout.branch` as the starting point, if it doesn't already exist.", "type": "string"}}, "required": ["branch"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCheckout": {"description": "Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used.", "properties": {"ref": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCheckoutRef", "description": "Reference gives a branch, tag or commit to clone from the Git repository."}}, "required": ["ref"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommit": {"description": "Commit specifies how to commit to the git repository.", "properties": {"author": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitAuthor", "description": "Author gives the email and optionally the name to use as the author of commits."}, "messageTemplate": {"description": "MessageTemplate provides a template for the commit message, into which will be interpolated the details of the change made.", "type": "string"}, "signingKey": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitSigningkey", "description": "SigningKey provides the option to sign commits with a GPG key"}}, "required": ["author"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitPush": {"description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default.", "properties": {"branch": {"description": "Branch specifies that commits should be pushed to the branch named. The branch is created using `.spec.checkout.branch` as the starting point, if it doesn't already exist.", "type": "string"}}, "required": ["branch"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecDecryptionSecretref": {"description": "The secret name containing the private OpenPGP keys used for decryption.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecKubeconfigSecretref": {"description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the Kustomization. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the Kustomization.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationSpecPostbuildSubstitutefrom": {"description": "SubstituteFrom holds references to ConfigMaps and Secrets containing the variables and their values to be substituted in the YAML manifests. The ConfigMap and the Secret data keys represent the var names and they must match the vars declared in the manifests for the substitution to happen.", "items": {"description": "SubstituteReference contains a reference to a resource containing the variables name and value.", "properties": {"kind": {"description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').", "enum": ["Secret", "ConfigMap"], "type": "string"}, "name": {"description": "Name of the values referent. Should reside in the same namespace as the referring resource.", "maxLength": 253, "minLength": 1, "type": "string"}}, "required": ["kind", "name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta1.KustomizationStatusSnapshotEntries": {"description": "A list of Kubernetes kinds grouped by namespace.", "items": {"description": "Snapshot holds the metadata of namespaced Kubernetes objects", "properties": {"kinds": {"additionalProperties": {"type": "string"}, "description": "The list of Kubernetes kinds.", "type": "object"}, "namespace": {"description": "The namespace of this entry.", "type": "string"}}, "required": ["kinds"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecDecryptionSecretref": {"description": "The secret name containing the private OpenPGP keys used for decryption.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecKubeconfigSecretref": {"description": "SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the Kustomization. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the Kustomization.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationSpecPostbuildSubstitutefrom": {"description": "SubstituteFrom holds references to ConfigMaps and Secrets containing the variables and their values to be substituted in the YAML manifests. The ConfigMap and the Secret data keys represent the var names and they must match the vars declared in the manifests for the substitution to happen.", "items": {"description": "SubstituteReference contains a reference to a resource containing the variables name and value.", "properties": {"kind": {"description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').", "enum": ["Secret", "ConfigMap"], "type": "string"}, "name": {"description": "Name of the values referent. Should reside in the same namespace as the referring resource.", "maxLength": 253, "minLength": 1, "type": "string"}, "optional": {"default": false, "description": "Optional indicates whether the referenced resource must exist, or whether to tolerate its absence. If true and the referenced resource is absent, proceed as if the resource was present but empty, without any variables defined.", "type": "boolean"}}, "required": ["kind", "name"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.kustomize.v1beta2.KustomizationStatusInventoryEntries": {"description": "Entries of Kubernetes resource object references.", "items": {"description": "ResourceRef contains the information necessary to locate a resource within a cluster.", "properties": {"id": {"description": "ID is the string representation of the Kubernetes resource object's metadata, in the format '<namespace>_<name>_<group>_<kind>'.", "type": "string"}, "v": {"description": "Version is the API version of the Kubernetes resource object's kind.", "type": "string"}}, "required": ["id", "v"], "type": "object"}, "type": "array"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpecSourceref": {"description": "The name and namespace of the v1beta1.Source the chart is available at.", "properties": {"apiVersion": {"description": "APIVersion of the referent.", "type": "string"}, "kind": {"description": "Kind of the referent.", "enum": ["HelmRepository", "GitRepository", "Bucket"], "type": "string"}, "name": {"description": "Name of the referent.", "maxLength": 253, "minLength": 1, "type": "string"}, "namespace": {"description": "Namespace of the referent.", "maxLength": 63, "minLength": 1, "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.helm.v2beta1.HelmReleaseSpecChartSpecValuesfiles": {"description": "Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.", "items": {"type": "string"}, "type": "array"}, "io.fluxcd.toolkit.image.v1alpha1.ImageUpdateAutomationSpecCommitSigningkeySecretref": {"description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCheckoutRef": {"description": "Reference gives a branch, tag or commit to clone from the Git repository.", "properties": {"branch": {"description": "The Git branch to checkout, defaults to master.", "type": "string"}, "commit": {"description": "The Git commit SHA to checkout, if specified Tag filters will be ignored.", "type": "string"}, "semver": {"description": "The Git tag semver expression, takes precedence over Tag.", "type": "string"}, "tag": {"description": "The Git tag to checkout, takes precedence over Branch.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitAuthor": {"description": "Author gives the email and optionally the name to use as the author of commits.", "properties": {"email": {"description": "Email gives the email to provide when making a commit.", "type": "string"}, "name": {"description": "Name gives the name to provide when making a commit.", "type": "string"}}, "required": ["email"], "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitSigningkey": {"description": "SigningKey provides the option to sign commits with a GPG key", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitSigningkeySecretref", "description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCheckoutRef": {"description": "Reference gives a branch, tag or commit to clone from the Git repository.", "properties": {"branch": {"description": "The Git branch to checkout, defaults to master.", "type": "string"}, "commit": {"description": "The Git commit SHA to checkout, if specified Tag filters will be ignored.", "type": "string"}, "semver": {"description": "The Git tag semver expression, takes precedence over Tag.", "type": "string"}, "tag": {"description": "The Git tag to checkout, takes precedence over Branch.", "type": "string"}}, "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitAuthor": {"description": "Author gives the email and optionally the name to use as the author of commits.", "properties": {"email": {"description": "Email gives the email to provide when making a commit.", "type": "string"}, "name": {"description": "Name gives the name to provide when making a commit.", "type": "string"}}, "required": ["email"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitSigningkey": {"description": "SigningKey provides the option to sign commits with a GPG key", "properties": {"secretRef": {"$ref": "#/definitions/io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitSigningkeySecretref", "description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation."}}, "type": "object"}, "io.fluxcd.toolkit.image.v1alpha2.ImageUpdateAutomationSpecGitCommitSigningkeySecretref": {"description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}, "io.fluxcd.toolkit.image.v1beta1.ImageUpdateAutomationSpecGitCommitSigningkeySecretref": {"description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation.", "properties": {"name": {"description": "Name of the referent", "type": "string"}}, "required": ["name"], "type": "object"}}}