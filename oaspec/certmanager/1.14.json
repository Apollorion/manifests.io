{"definitions": {"io.cert-manager.v1.ClusterIssuer": {"description": "A ClusterIssuer represents a certificate issuing authority which can be\nreferenced as part of `issuerRef` fields.\nIt is similar to an Issuer, however it is cluster-scoped and therefore can\nbe referenced by resources that exist in *any* namespace, not just the same\nnamespace as the referent.", "type": "object", "required": ["spec"], "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpec", "description": "Desired state of the ClusterIssuer resource."}, "status": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerStatus", "description": "Status of the ClusterIssuer. This is set and managed automatically."}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager", "version": "v1", "kind": "ClusterIssuer"}]}, "io.cert-manager.v1.ClusterIssuerSpec": {"description": "Desired state of the ClusterIssuer resource.", "type": "object", "properties": {"acme": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecAcme", "description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server\nto obtain signed x509 certificates."}, "ca": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecCa", "description": "CA configures this issuer to sign certificates using a signing CA keypair\nstored in a Secret resource.\nThis is used to build internal PKIs that are managed by cert-manager."}, "selfSigned": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecSelfsigned", "description": "SelfSigned configures this issuer to 'self sign' certificates using the\nprivate key used to create the CertificateRequest object."}, "vault": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVault", "description": "Vault configures this issuer to sign certificates using a HashiCorp Vault\nPKI backend."}, "venafi": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVenafi", "description": "Venafi configures this issuer to sign certificates using a Venafi TPP\nor Venafi Cloud policy zone."}}}, "io.cert-manager.v1.ClusterIssuerStatus": {"description": "Status of the ClusterIssuer. This is set and managed automatically.", "type": "object", "properties": {"acme": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerStatusAcme", "description": "ACME specific status options.\nThis field should only be set if the Issuer is configured to use an ACME\nserver to issue certificates."}, "conditions": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerStatusConditions"}, "description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`.", "manifests_processed": true}}}, "io.cert-manager.v1.ClusterIssuerSpecAcme": {"description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server\nto obtain signed x509 certificates.", "type": "object", "required": ["privateKeySecretRef", "server"], "properties": {"caBundle": {"description": "Base64-encoded bundle of PEM CAs which can be used to validate the certificate\nchain presented by the ACME server.\nMutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various\nkinds of security vulnerabilities.\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\nthe container is used to validate the TLS connection.", "type": "string", "format": "byte"}, "disableAccountKeyGeneration": {"description": "Enables or disables generating a new ACME account key.\nIf true, the Issuer resource will *not* request a new account but will expect\nthe account key to be supplied via an existing secret.\nIf false, the cert-manager system will generate a new ACME account key\nfor the Issuer.\nDefaults to false.", "type": "boolean"}, "email": {"description": "Email is the email address to be associated with the ACME account.\nThis field is optional, but it is strongly recommended to be set.\nIt will be used to contact you in case of issues with your account or\ncertificates, including expiry notification emails.\nThis field may be updated after the account is initially registered.", "type": "string"}, "enableDurationFeature": {"description": "Enables requesting a Not After date on certificates that matches the\nduration of the certificate. This is not supported by all ACME servers\nlike Let's Encrypt. If set to true when the ACME server does not support\nit it will create an error on the Order.\nDefaults to false.", "type": "boolean"}, "externalAccountBinding": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecAcmeExternalaccountbinding", "description": "ExternalAccountBinding is a reference to a CA external account of the ACME\nserver.\nIf set, upon registration cert-manager will attempt to associate the given\nexternal account credentials with the registered ACME account."}, "preferredChain": {"description": "PreferredChain is the chain to use if the ACME server outputs multiple.\nPreferredChain is no guarantee that this one gets delivered by the ACME\nendpoint.\nFor example, for Let's Encrypt's DST crosssign you would use:\n\"DST Root CA X3\" or \"ISRG Root X1\" for the newer Let's Encrypt root CA.\nThis value picks the first certificate bundle in the combined set of\nACME default and alternative chains that has a root-most certificate with\nthis value as its issuer's commonname.", "type": "string", "maxLength": 64}, "privateKeySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecAcmePrivatekeysecretref", "description": "PrivateKey is the name of a Kubernetes Secret resource that will be used to\nstore the automatically generated ACME account private key.\nOptionally, a `key` may be specified to select a specific entry within\nthe named Secret resource.\nIf `key` is not specified, a default of `tls.key` will be used."}, "server": {"description": "Server is the URL used to access the ACME server's 'directory' endpoint.\nFor example, for Let's Encrypt's staging endpoint, you would use:\n\"https://acme-staging-v02.api.letsencrypt.org/directory\".\nOnly ACME v2 endpoints (i.e. RFC 8555) are supported.", "type": "string"}, "skipTLSVerify": {"description": "INSECURE: Enables or disables validation of the ACME server TLS certificate.\nIf true, requests to the ACME server will not have the TLS certificate chain\nvalidated.\nMutually exclusive with CABundle; prefer using CABundle to prevent various\nkinds of security vulnerabilities.\nOnly enable this option in development environments.\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\nthe container is used to validate the TLS connection.\nDefaults to false.", "type": "boolean"}, "solvers": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecAcmeSolvers"}, "description": "Solvers is a list of challenge solvers that will be used to solve\nACME challenges for the matching domains.\nSolver configurations must be provided in order to obtain certificates\nfrom an ACME server.\nFor more information, see: https://cert-manager.io/docs/configuration/acme/", "manifests_processed": true}}}, "io.cert-manager.v1.ClusterIssuerSpecCa": {"description": "CA configures this issuer to sign certificates using a signing CA keypair\nstored in a Secret resource.\nThis is used to build internal PKIs that are managed by cert-manager.", "type": "object", "required": ["secretName"], "properties": {"crlDistributionPoints": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecCaCrldistributionpoints"}, "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set, certificates will be issued without distribution points set.", "manifests_processed": true}, "issuingCertificateURLs": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecCaIssuingcertificateurls"}, "description": "IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\nAs an example, such a URL might be \"http://ca.domain.com/ca.crt\".", "manifests_processed": true}, "ocspServers": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecCaOcspservers"}, "description": "The OCSP server list is an X.509 v3 extension that defines a list of\nURLs of OCSP responders. The OCSP responders can be queried for the\nrevocation status of an issued certificate. If not set, the\ncertificate will be issued with no OCSP servers set. For example, an\nOCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".", "manifests_processed": true}, "secretName": {"description": "SecretName is the name of the secret used to sign Certificates issued\nby this Issuer.", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecSelfsigned": {"description": "SelfSigned configures this issuer to 'self sign' certificates using the\nprivate key used to create the CertificateRequest object.", "type": "object", "properties": {"crlDistributionPoints": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecSelfsignedCrldistributionpoints"}, "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set certificate will be issued without CDP. Values are strings.", "manifests_processed": true}}}, "io.cert-manager.v1.ClusterIssuerSpecVault": {"description": "Vault configures this issuer to sign certificates using a HashiCorp Vault\nPKI backend.", "type": "object", "required": ["auth", "path", "server"], "properties": {"auth": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuth", "description": "Auth configures how cert-manager authenticates with the Vault server."}, "caBundle": {"description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate\nchain presented by Vault. Only used if using HTTPS to connect to Vault and\nignored for HTTP connections.\nMutually exclusive with CABundleSecretRef.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.", "type": "string", "format": "byte"}, "caBundleSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultCabundlesecretref", "description": "Reference to a Secret containing a bundle of PEM-encoded CAs to use when\nverifying the certificate chain presented by Vault when using HTTPS.\nMutually exclusive with CABundle.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'."}, "clientCertSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultClientcertsecretref", "description": "Reference to a Secret containing a PEM-encoded Client Certificate to use when the\nVault server requires mTLS."}, "clientKeySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultClientkeysecretref", "description": "Reference to a Secret containing a PEM-encoded Client Private Key to use when the\nVault server requires mTLS."}, "namespace": {"description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\"\nMore about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces", "type": "string"}, "path": {"description": "Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:\n\"my_pki_mount/sign/my-role-name\".", "type": "string"}, "server": {"description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVenafi": {"description": "Venafi configures this issuer to sign certificates using a Venafi TPP\nor Venafi Cloud policy zone.", "type": "object", "required": ["zone"], "properties": {"cloud": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVenafiCloud", "description": "Cloud specifies the Venafi cloud configuration settings.\nOnly one of TPP or Cloud may be specified."}, "tpp": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVenafiTpp", "description": "TPP specifies Trust Protection Platform configuration settings.\nOnly one of TPP or Cloud may be specified."}, "zone": {"description": "Zone is the Venafi Policy Zone to use for this issuer.\nAll requests made to the Venafi platform will be restricted by the named\nzone policy.\nThis field is required.", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerStatusAcme": {"description": "ACME specific status options.\nThis field should only be set if the Issuer is configured to use an ACME\nserver to issue certificates.", "type": "object", "properties": {"lastPrivateKeyHash": {"description": "LastPrivateKeyHash is a hash of the private key associated with the latest\nregistered ACME account, in order to track changes made to registered account\nassociated with the Issuer", "type": "string"}, "lastRegisteredEmail": {"description": "LastRegisteredEmail is the email associated with the latest registered\nACME account, in order to track changes made to registered account\nassociated with the  Issuer", "type": "string"}, "uri": {"description": "URI is the unique account identifier, which can also be used to retrieve\naccount details from the CA", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerStatusConditions": {"description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`.", "type": "array", "items": {"description": "IssuerCondition contains condition information for an Issuer.", "type": "object", "required": ["status", "type"], "properties": {"lastTransitionTime": {"description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.", "type": "string", "format": "date-time"}, "message": {"description": "Message is a human readable description of the details of the last\ntransition, complementing reason.", "type": "string"}, "observedGeneration": {"description": "If set, this represents the .metadata.generation that the condition was\nset based upon.\nFor instance, if .metadata.generation is currently 12, but the\n.status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the Issuer.", "type": "integer", "format": "int64"}, "reason": {"description": "Reason is a brief machine readable explanation for the condition's last\ntransition.", "type": "string"}, "status": {"description": "Status of the condition, one of (`True`, `False`, `Unknown`).", "type": "string", "enum": ["True", "False", "Unknown"]}, "type": {"description": "Type of the condition, known values are (`Ready`).", "type": "string"}}}, "x-kubernetes-list-map-keys": ["type"], "x-kubernetes-list-type": "map"}, "io.cert-manager.v1.ClusterIssuerSpecAcmeExternalaccountbinding": {"description": "ExternalAccountBinding is a reference to a CA external account of the ACME\nserver.\nIf set, upon registration cert-manager will attempt to associate the given\nexternal account credentials with the registered ACME account.", "type": "object", "required": ["keyID", "keySecretRef"], "properties": {"keyAlgorithm": {"description": "Deprecated: keyAlgorithm field exists for historical compatibility\nreasons and should not be used. The algorithm is now hardcoded to HS256\nin golang/x/crypto/acme.", "type": "string", "enum": ["HS256", "HS384", "HS512"]}, "keyID": {"description": "keyID is the ID of the CA key that the External Account is bound to.", "type": "string"}, "keySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecAcmeExternalaccountbindingKeysecretref", "description": "keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\nSecret which holds the symmetric MAC key of the External Account Binding.\nThe `key` is the index string that is paired with the key data in the\nSecret and should not be confused with the key data itself, or indeed with\nthe External Account Binding keyID above.\nThe secret key stored in the Secret **must** be un-padded, base64 URL\nencoded data."}}}, "io.cert-manager.v1.ClusterIssuerSpecAcmePrivatekeysecretref": {"description": "PrivateKey is the name of a Kubernetes Secret resource that will be used to\nstore the automatically generated ACME account private key.\nOptionally, a `key` may be specified to select a specific entry within\nthe named Secret resource.\nIf `key` is not specified, a default of `tls.key` will be used.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecAcmeSolvers": {"description": "Solvers is a list of challenge solvers that will be used to solve\nACME challenges for the matching domains.\nSolver configurations must be provided in order to obtain certificates\nfrom an ACME server.\nFor more information, see: https://cert-manager.io/docs/configuration/acme/", "type": "array", "items": {"description": "An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.\nA selector may be provided to use different solving strategies for different DNS names.\nOnly one of HTTP01 or DNS01 must be provided.", "type": "object", "properties": {"dns01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the DNS01 challenge flow.", "type": "object", "properties": {"acmeDNS": {"description": "Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\nDNS01 challenge records.", "type": "object", "required": ["accountSecretRef", "host"], "properties": {"accountSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "host": {"type": "string"}}}, "akamai": {"description": "Use the Akamai DNS zone management API to manage DNS01 challenge records.", "type": "object", "required": ["accessTokenSecretRef", "clientSecretSecretRef", "clientTokenSecretRef", "serviceConsumerDomain"], "properties": {"accessTokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "clientSecretSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "clientTokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "serviceConsumerDomain": {"type": "string"}}}, "azureDNS": {"description": "Use the Microsoft Azure DNS API to manage DNS01 challenge records.", "type": "object", "required": ["resourceGroupName", "subscriptionID"], "properties": {"clientID": {"description": "Auth: Azure Service Principal:\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientSecret and TenantID must also be set.", "type": "string"}, "clientSecretSecretRef": {"description": "Auth: Azure Service Principal:\nA reference to a Secret containing the password associated with the Service Principal.\nIf set, ClientID and TenantID must also be set.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "environment": {"description": "name of the Azure environment (default AzurePublicCloud)", "type": "string", "enum": ["AzurePublicCloud", "AzureChinaCloud", "AzureGermanCloud", "AzureUSGovernmentCloud"]}, "hostedZoneName": {"description": "name of the DNS zone that should be used", "type": "string"}, "managedIdentity": {"description": "Auth: Azure Workload Identity or Azure Managed Service Identity:\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\nIf set, ClientID, ClientSecret and TenantID must not be set.", "type": "object", "properties": {"clientID": {"description": "client ID of the managed identity, can not be used at the same time as resourceID", "type": "string"}, "resourceID": {"description": "resource ID of the managed identity, can not be used at the same time as clientID\nCannot be used for Azure Managed Service Identity", "type": "string"}}}, "resourceGroupName": {"description": "resource group the DNS zone is located in", "type": "string"}, "subscriptionID": {"description": "ID of the Azure subscription", "type": "string"}, "tenantID": {"description": "Auth: Azure Service Principal:\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientID and ClientSecret must also be set.", "type": "string"}}}, "cloudDNS": {"description": "Use the Google Cloud DNS API to manage DNS01 challenge records.", "type": "object", "required": ["project"], "properties": {"hostedZoneName": {"description": "HostedZoneName is an optional field that tells cert-manager in which\nCloud DNS zone the challenge record has to be created.\nIf left empty cert-manager will automatically choose a zone.", "type": "string"}, "project": {"type": "string"}, "serviceAccountSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "cloudflare": {"description": "Use the Cloudflare API to manage DNS01 challenge records.", "type": "object", "properties": {"apiKeySecretRef": {"description": "API key to use to authenticate with Cloudflare.\nNote: using an API token to authenticate is now the recommended method\nas it allows greater control of permissions.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "apiTokenSecretRef": {"description": "API token used to authenticate with Cloudflare.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "email": {"description": "Email of the account, only required when using API key based authentication.", "type": "string"}}}, "cnameStrategy": {"description": "CNAMEStrategy configures how the DNS01 provider should handle CNAME\nrecords when found in DNS zones.", "type": "string", "enum": ["None", "Follow"]}, "digitalocean": {"description": "Use the DigitalOcean DNS API to manage DNS01 challenge records.", "type": "object", "required": ["tokenSecretRef"], "properties": {"tokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "rfc2136": {"description": "Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/)\nto manage DNS01 challenge records.", "type": "object", "required": ["nameserver"], "properties": {"nameserver": {"description": "The IP address or hostname of an authoritative DNS server supporting\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\nThis field is required.", "type": "string"}, "tsigAlgorithm": {"description": "The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\nSupported values are (case-insensitive): ``HMACMD5`` (default),\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.", "type": "string"}, "tsigKeyName": {"description": "The TSIG Key name configured in the DNS.\nIf ``tsigSecretSecretRef`` is defined, this field is required.", "type": "string"}, "tsigSecretSecretRef": {"description": "The name of the secret containing the TSIG value.\nIf ``tsigKeyName`` is defined, this field is required.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "route53": {"description": "Use the AWS Route53 API to manage DNS01 challenge records.", "type": "object", "required": ["region"], "properties": {"accessKeyID": {"description": "The AccessKeyID is used for authentication.\nCannot be set when SecretAccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "string"}, "accessKeyIDSecretRef": {"description": "The SecretAccessKey is used for authentication. If set, pull the AWS\naccess key ID from a key within a Kubernetes Secret.\nCannot be set when AccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "hostedZoneID": {"description": "If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.", "type": "string"}, "region": {"description": "Always set the region when using AccessKeyID and SecretAccessKey", "type": "string"}, "role": {"description": "Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata", "type": "string"}, "secretAccessKeySecretRef": {"description": "The SecretAccessKey is used for authentication.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "webhook": {"description": "Configure an external webhook based DNS01 challenge solver to manage\nDNS01 challenge records.", "type": "object", "required": ["groupName", "solverName"], "properties": {"config": {"description": "Additional configuration that should be passed to the webhook apiserver\nwhen challenges are processed.\nThis can contain arbitrary JSON data.\nSecret values should not be specified in this stanza.\nIf secret values are needed (e.g. credentials for a DNS service), you\nshould use a SecretKeySelector to reference a Secret resource.\nFor details on the schema of this field, consult the webhook provider\nimplementation's documentation.", "x-kubernetes-preserve-unknown-fields": true}, "groupName": {"description": "The API group name that should be used when POSTing ChallengePayload\nresources to the webhook apiserver.\nThis should be the same as the GroupName specified in the webhook\nprovider implementation.", "type": "string"}, "solverName": {"description": "The name of the solver to use, as defined in the webhook provider\nimplementation.\nThis will typically be the name of the provider, e.g. 'cloudflare'.", "type": "string"}}}}}, "http01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the HTTP01 challenge flow.\nIt is not possible to obtain certificates for wildcard domain names\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.", "type": "object", "properties": {"gatewayHTTPRoute": {"description": "The Gateway API is a sig-network community API that models service networking\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\nThis solver is experimental, and fields / behaviour may change in the future.", "type": "object", "properties": {"labels": {"description": "Custom labels that will be applied to HTTPRoutes created by cert-manager\nwhile solving HTTP-01 challenges.", "type": "object", "additionalProperties": {"type": "string"}}, "parentRefs": {"description": "When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\ncert-manager needs to know which parentRefs should be used when creating\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways", "type": "array", "items": {"description": "ParentReference identifies an API object (usually a Gateway) that can be considered\na parent of this resource (usually a route). There are two kinds of parent resources\nwith \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nThis API may be extended in the future to support additional kinds of parent\nresources.\n\n\nThe API object must be valid in the cluster; the Group and Kind must\nbe registered in the cluster for this reference to be valid.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group is the group of the referent.\nWhen unspecified, \"gateway.networking.k8s.io\" is inferred.\nTo set the core API group (such as for a \"Service\" kind referent),\nGroup must be explicitly set to \"\" (empty string).\n\n\nSupport: Core", "type": "string", "default": "gateway.networking.k8s.io", "maxLength": 253, "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}, "kind": {"description": "Kind is kind of the referent.\n\n\nThere are two kinds of parent resources with \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nSupport for other resources is Implementation-Specific.", "type": "string", "default": "Gateway", "maxLength": 63, "minLength": 1, "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"}, "name": {"description": "Name is the name of the referent.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1}, "namespace": {"description": "Namespace is the namespace of the referent. When unspecified, this refers\nto the local namespace of the Route.\n\n\nNote that there are specific rules for ParentRefs which cross namespace\nboundaries. Cross-namespace references are only valid if they are explicitly\nallowed by something in the namespace they are referring to. For example:\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\ngeneric way to enable any other kind of cross-namespace reference.\n\n\n<gateway:experimental:description>\nParentRefs from a Route to a Service in the same namespace are \"producer\"\nroutes, which apply default routing rules to inbound connections from\nany namespace to the Service.\n\n\nParentRefs from a Route to a Service in a different namespace are\n\"consumer\" routes, and these routing rules are only applied to outbound\nconnections originating from the same namespace as the Route, for which\nthe intended destination of the connections are a Service targeted as a\nParentRef of the Route.\n</gateway:experimental:description>\n\n\nSupport: Core", "type": "string", "maxLength": 63, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"}, "port": {"description": "Port is the network port this Route targets. It can be interpreted\ndifferently based on the type of parent resource.\n\n\nWhen the parent resource is a Gateway, this targets all listeners\nlistening on the specified port that also support this kind of Route(and\nselect this Route). It's not recommended to set `Port` unless the\nnetworking behaviors specified in a Route must apply to a specific port\nas opposed to a listener(s) whose port(s) may be changed. When both Port\nand SectionName are specified, the name and port of the selected listener\nmust match both specified values.\n\n\n<gateway:experimental:description>\nWhen the parent resource is a Service, this targets a specific port in the\nService spec. When both Port (experimental) and SectionName are specified,\nthe name and port of the selected port must match both specified values.\n</gateway:experimental:description>\n\n\nImplementations MAY choose to support other parent resources.\nImplementations supporting other types of parent resources MUST clearly\ndocument how/if Port is interpreted.\n\n\nFor the purpose of status, an attachment is considered successful as\nlong as the parent resource accepts it partially. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\nfrom the referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route,\nthe Route MUST be considered detached from the Gateway.\n\n\nSupport: Extended\n\n\n<gateway:experimental>", "type": "integer", "format": "int32", "maximum": 65535, "minimum": 1}, "sectionName": {"description": "SectionName is the name of a section within the target resource. In the\nfollowing resources, SectionName is interpreted as the following:\n\n\n* Gateway: Listener Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n* Service: Port Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values. Note that attaching Routes to Services as Parents\nis part of experimental Mesh support and is not supported for any other\npurpose.\n\n\nImplementations MAY choose to support attaching Routes to other resources.\nIf that is the case, they MUST clearly document how SectionName is\ninterpreted.\n\n\nWhen unspecified (empty string), this will reference the entire resource.\nFor the purpose of status, an attachment is considered successful if at\nleast one section in the parent resource accepts it. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\nthe referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route, the\nRoute MUST be considered detached from the Gateway.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}}}}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}, "ingress": {"description": "The ingress based HTTP01 challenge solver will solve challenges by\ncreating or modifying Ingress resources in order to route requests for\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\nprovisioned by cert-manager for each Challenge to be completed.", "type": "object", "properties": {"class": {"description": "This field configures the annotation `kubernetes.io/ingress.class` when\ncreating Ingress resources to solve ACME challenges that use this\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "ingressClassName": {"description": "This field configures the field `ingressClassName` on the created Ingress\nresources used to solve ACME challenges that use this challenge solver.\nThis is the recommended way of configuring the ingress class. Only one of\n`class`, `name` or `ingressClassName` may be specified.", "type": "string"}, "ingressTemplate": {"description": "Optional ingress template used to configure the ACME challenge solver\ningress used for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"description": "ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}}}}}, "name": {"description": "The name of the ingress resource that should have ACME challenge solving\nroutes inserted into it in order to solve HTTP01 challenges.\nThis is typically used in conjunction with ingress controllers like\ningress-gce, which maintains a 1:1 mapping between external IPs and\ningress resources. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "podTemplate": {"description": "Optional pod template used to configure the ACME challenge solver pods\nused for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"description": "ObjectMeta overrides for the pod used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the create ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}}}, "spec": {"description": "PodSpec defines overrides for the HTTP01 challenge solver pod.\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\nAll other fields will be ignored.", "type": "object", "properties": {"affinity": {"description": "If specified, the pod's scheduling constraints", "type": "object", "properties": {"nodeAffinity": {"description": "Describes node affinity scheduling rules for the pod.", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", "type": "object", "required": ["preference", "weight"], "properties": {"preference": {"description": "A node selector term, associated with the corresponding weight.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}, "weight": {"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.", "type": "object", "required": ["nodeSelectorTerms"], "properties": {"nodeSelectorTerms": {"description": "Required. A list of node selector terms. The terms are ORed.", "type": "array", "items": {"description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}}}, "x-kubernetes-map-type": "atomic"}}}, "podAffinity": {"description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}}}, "podAntiAffinity": {"description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}}}}}, "imagePullSecrets": {"description": "If specified, the pod's imagePullSecrets", "type": "array", "items": {"description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.", "type": "object", "properties": {"name": {"description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?", "type": "string"}}, "x-kubernetes-map-type": "atomic"}}, "nodeSelector": {"description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/", "type": "object", "additionalProperties": {"type": "string"}}, "priorityClassName": {"description": "If specified, the pod's priorityClassName.", "type": "string"}, "serviceAccountName": {"description": "If specified, the pod's service account", "type": "string"}, "tolerations": {"description": "If specified, the pod's tolerations.", "type": "array", "items": {"description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.", "type": "object", "properties": {"effect": {"description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.", "type": "string"}, "key": {"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.", "type": "string"}, "operator": {"description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.", "type": "string"}, "tolerationSeconds": {"description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.", "type": "integer", "format": "int64"}, "value": {"description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.", "type": "string"}}}}}}}}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}}}, "selector": {"description": "Selector selects a set of DNSNames on the Certificate resource that\nshould be solved using this challenge solver.\nIf not specified, the solver will be treated as the 'default' solver\nwith the lowest priority, i.e. if any other solver has a more specific\nmatch, it will be used instead.", "type": "object", "properties": {"dnsNames": {"description": "List of DNSNames that this solver will be used to solve.\nIf specified and a match is found, a dnsNames selector will take\nprecedence over a dnsZones selector.\nIf multiple solvers match with the same dnsNames value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "dnsZones": {"description": "List of DNSZones that this solver will be used to solve.\nThe most specific DNS zone match specified here will take precedence\nover other DNS zone matches, so a solver specifying sys.example.com\nwill be selected over one specifying example.com for the domain\nwww.sys.example.com.\nIf multiple solvers match with the same dnsZones value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "matchLabels": {"description": "A label selector that is used to refine the set of certificate's that\nthis challenge solver will apply to.", "type": "object", "additionalProperties": {"type": "string"}}}}}}}, "io.cert-manager.v1.ClusterIssuerSpecCaCrldistributionpoints": {"description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set, certificates will be issued without distribution points set.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.ClusterIssuerSpecCaIssuingcertificateurls": {"description": "IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\nAs an example, such a URL might be \"http://ca.domain.com/ca.crt\".", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.ClusterIssuerSpecCaOcspservers": {"description": "The OCSP server list is an X.509 v3 extension that defines a list of\nURLs of OCSP responders. The OCSP responders can be queried for the\nrevocation status of an issued certificate. If not set, the\ncertificate will be issued with no OCSP servers set. For example, an\nOCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.ClusterIssuerSpecSelfsignedCrldistributionpoints": {"description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set certificate will be issued without CDP. Values are strings.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuth": {"description": "Auth configures how cert-manager authenticates with the Vault server.", "type": "object", "properties": {"appRole": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthApprole", "description": "AppRole authenticates with Vault using the App Role auth mechanism,\nwith the role and secret stored in a Kubernetes Secret resource."}, "kubernetes": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetes", "description": "Kubernetes authenticates with Vault by passing the ServiceAccount\ntoken stored in the named Secret resource to the Vault server."}, "tokenSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthTokensecretref", "description": "TokenSecretRef authenticates with Vault by presenting a token."}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultCabundlesecretref": {"description": "Reference to a Secret containing a bundle of PEM-encoded CAs to use when\nverifying the certificate chain presented by Vault when using HTTPS.\nMutually exclusive with CABundle.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultClientcertsecretref": {"description": "Reference to a Secret containing a PEM-encoded Client Certificate to use when the\nVault server requires mTLS.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultClientkeysecretref": {"description": "Reference to a Secret containing a PEM-encoded Client Private Key to use when the\nVault server requires mTLS.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVenafiCloud": {"description": "Cloud specifies the Venafi cloud configuration settings.\nOnly one of TPP or Cloud may be specified.", "type": "object", "required": ["apiTokenSecretRef"], "properties": {"apiTokenSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVenafiCloudApitokensecretref", "description": "APITokenSecretRef is a secret key selector for the Venafi Cloud API token."}, "url": {"description": "URL is the base URL for Venafi Cloud.\nDefaults to \"https://api.venafi.cloud/v1\".", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVenafiTpp": {"description": "TPP specifies Trust Protection Platform configuration settings.\nOnly one of TPP or Cloud may be specified.", "type": "object", "required": ["credentialsRef", "url"], "properties": {"caBundle": {"description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate\nchain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.\nIf undefined, the certificate bundle in the cert-manager controller container\nis used to validate the chain.", "type": "string", "format": "byte"}, "credentialsRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVenafiTppCredentialsref", "description": "CredentialsRef is a reference to a Secret containing the username and\npassword for the TPP server.\nThe secret must contain two keys, 'username' and 'password'."}, "url": {"description": "URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,\nfor example: \"https://tpp.example.com/vedsdk\".", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecAcmeExternalaccountbindingKeysecretref": {"description": "keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\nSecret which holds the symmetric MAC key of the External Account Binding.\nThe `key` is the index string that is paired with the key data in the\nSecret and should not be confused with the key data itself, or indeed with\nthe External Account Binding keyID above.\nThe secret key stored in the Secret **must** be un-padded, base64 URL\nencoded data.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthApprole": {"description": "AppRole authenticates with Vault using the App Role auth mechanism,\nwith the role and secret stored in a Kubernetes Secret resource.", "type": "object", "required": ["path", "roleId", "secretRef"], "properties": {"path": {"description": "Path where the App Role authentication backend is mounted in Vault, e.g:\n\"approle\"", "type": "string"}, "roleId": {"description": "RoleID configured in the App Role authentication backend when setting\nup the authentication backend in Vault.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthApproleSecretref", "description": "Reference to a key in a Secret that contains the App Role secret used\nto authenticate with Vault.\nThe `key` field must be specified and denotes which entry within the Secret\nresource is used as the app role secret."}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetes": {"description": "Kubernetes authenticates with Vault by passing the ServiceAccount\ntoken stored in the named Secret resource to the Vault server.", "type": "object", "required": ["role"], "properties": {"mountPath": {"description": "The Vault mountPath here is the mount path to use when authenticating with\nVault. For example, setting a value to `/v1/auth/foo`, will use the path\n`/v1/auth/foo/login` to authenticate with Vault. If unspecified, the\ndefault value \"/v1/auth/kubernetes\" will be used.", "type": "string"}, "role": {"description": "A required field containing the Vault Role to assume. A Role binds a\nKubernetes ServiceAccount with a set of Vault policies.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretref", "description": "The required Secret field containing a Kubernetes ServiceAccount JWT used\nfor authenticating with Vault. Use of 'ambient credentials' is not\nsupported."}, "serviceAccountRef": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceaccountref", "description": "A reference to a service account that will be used to request a bound\ntoken (also known as \"projected token\"). Compared to using \"secretRef\",\nusing this field means that you don't rely on statically bound tokens. To\nuse this field, you must configure an RBAC rule to let cert-manager\nrequest a token."}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthTokensecretref": {"description": "TokenSecretRef authenticates with Vault by presenting a token.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVenafiCloudApitokensecretref": {"description": "APITokenSecretRef is a secret key selector for the Venafi Cloud API token.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVenafiTppCredentialsref": {"description": "CredentialsRef is a reference to a Secret containing the username and\npassword for the TPP server.\nThe secret must contain two keys, 'username' and 'password'.", "type": "object", "required": ["name"], "properties": {"name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthApproleSecretref": {"description": "Reference to a key in a Secret that contains the App Role secret used\nto authenticate with Vault.\nThe `key` field must be specified and denotes which entry within the Secret\nresource is used as the app role secret.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretref": {"description": "The required Secret field containing a Kubernetes ServiceAccount JWT used\nfor authenticating with Vault. Use of 'ambient credentials' is not\nsupported.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceaccountref": {"description": "A reference to a service account that will be used to request a bound\ntoken (also known as \"projected token\"). Compared to using \"secretRef\",\nusing this field means that you don't rely on statically bound tokens. To\nuse this field, you must configure an RBAC rule to let cert-manager\nrequest a token.", "type": "object", "required": ["name"], "properties": {"audiences": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceaccountrefAudiences"}, "description": "TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\nconsisting of the issuer's namespace and name is always included.", "manifests_processed": true}, "name": {"description": "Name of the ServiceAccount used to request a token.", "type": "string"}}}, "io.cert-manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceaccountrefAudiences": {"description": "TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\nconsisting of the issuer's namespace and name is always included.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.acme.v1.Challenge": {"description": "Challenge is a type to represent a Challenge request with an ACME server", "type": "object", "required": ["metadata", "spec"], "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpec", "description": ""}, "status": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeStatus", "description": ""}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager.acme", "version": "v1", "kind": "Challenge"}]}, "io.cert-manager.acme.v1.ChallengeSpec": {"type": "object", "required": ["authorizationURL", "dnsName", "issuerRef", "key", "solver", "token", "type", "url"], "properties": {"authorizationURL": {"description": "The URL to the ACME Authorization resource that this\nchallenge is a part of.", "type": "string"}, "dnsName": {"description": "dnsName is the identifier that this challenge is for, e.g. example.com.\nIf the requested DNSName is a 'wildcard', this field MUST be set to the\nnon-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.", "type": "string"}, "issuerRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecIssuerref", "description": "References a properly configured ACME-type Issuer which should\nbe used to create this Challenge.\nIf the Issuer does not exist, processing will be retried.\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\nChallenge will be marked as failed."}, "key": {"description": "The ACME challenge key for this challenge\nFor HTTP01 challenges, this is the value that must be responded with to\ncomplete the HTTP01 challenge in the format:\n`<private key JWK thumbprint>.<key from acme server for challenge>`.\nFor DNS01 challenges, this is the base64 encoded SHA256 sum of the\n`<private key JWK thumbprint>.<key from acme server for challenge>`\ntext that must be set as the TXT record content.", "type": "string"}, "solver": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolver", "description": "Contains the domain solving configuration that should be used to\nsolve this challenge resource."}, "token": {"description": "The ACME challenge token for this challenge.\nThis is the raw value returned from the ACME server.", "type": "string"}, "type": {"description": "The type of ACME challenge this resource represents.\nOne of \"HTTP-01\" or \"DNS-01\".", "type": "string", "enum": ["HTTP-01", "DNS-01"]}, "url": {"description": "The URL of the ACME Challenge resource for this challenge.\nThis can be used to lookup details about the status of this challenge.", "type": "string"}, "wildcard": {"description": "wildcard will be true if this challenge is for a wildcard identifier,\nfor example '*.example.com'.", "type": "boolean"}}, "description": ""}, "io.cert-manager.acme.v1.ChallengeStatus": {"type": "object", "properties": {"presented": {"description": "presented will be set to true if the challenge values for this challenge\nare currently 'presented'.\nThis *does not* imply the self check is passing. Only that the values\nhave been 'submitted' for the appropriate challenge mechanism (i.e. the\nDNS01 TXT record has been presented, or the HTTP01 configuration has been\nconfigured).", "type": "boolean"}, "processing": {"description": "Used to denote whether this challenge should be processed or not.\nThis field will only be set to true by the 'scheduling' component.\nIt will only be set to false by the 'challenges' controller, after the\nchallenge has reached a final state or timed out.\nIf this field is set to false, the challenge controller will not take\nany more action.", "type": "boolean"}, "reason": {"description": "Contains human readable information on why the Challenge is in the\ncurrent state.", "type": "string"}, "state": {"description": "Contains the current 'state' of the challenge.\nIf not set, the state of the challenge is unknown.", "type": "string", "enum": ["valid", "ready", "pending", "processing", "invalid", "expired", "errored"]}}, "description": ""}, "io.cert-manager.acme.v1.ChallengeSpecIssuerref": {"description": "References a properly configured ACME-type Issuer which should\nbe used to create this Challenge.\nIf the Issuer does not exist, processing will be retried.\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\nChallenge will be marked as failed.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group of the resource being referred to.", "type": "string"}, "kind": {"description": "Kind of the resource being referred to.", "type": "string"}, "name": {"description": "Name of the resource being referred to.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolver": {"description": "Contains the domain solving configuration that should be used to\nsolve this challenge resource.", "type": "object", "properties": {"dns01": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01", "description": "Configures cert-manager to attempt to complete authorizations by\nperforming the DNS01 challenge flow."}, "http01": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01", "description": "Configures cert-manager to attempt to complete authorizations by\nperforming the HTTP01 challenge flow.\nIt is not possible to obtain certificates for wildcard domain names\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism."}, "selector": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverSelector", "description": "Selector selects a set of DNSNames on the Certificate resource that\nshould be solved using this challenge solver.\nIf not specified, the solver will be treated as the 'default' solver\nwith the lowest priority, i.e. if any other solver has a more specific\nmatch, it will be used instead."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the DNS01 challenge flow.", "type": "object", "properties": {"acmeDNS": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Acmedns", "description": "Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\nDNS01 challenge records."}, "akamai": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Akamai", "description": "Use the Akamai DNS zone management API to manage DNS01 challenge records."}, "azureDNS": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Azuredns", "description": "Use the Microsoft Azure DNS API to manage DNS01 challenge records."}, "cloudDNS": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Clouddns", "description": "Use the Google Cloud DNS API to manage DNS01 challenge records."}, "cloudflare": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Cloudflare", "description": "Use the Cloudflare API to manage DNS01 challenge records."}, "cnameStrategy": {"description": "CNAMEStrategy configures how the DNS01 provider should handle CNAME\nrecords when found in DNS zones.", "type": "string", "enum": ["None", "Follow"]}, "digitalocean": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Digitalocean", "description": "Use the DigitalOcean DNS API to manage DNS01 challenge records."}, "rfc2136": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Rfc2136", "description": "Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/)\nto manage DNS01 challenge records."}, "route53": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53", "description": "Use the AWS Route53 API to manage DNS01 challenge records."}, "webhook": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Webhook", "description": "Configure an external webhook based DNS01 challenge solver to manage\nDNS01 challenge records."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the HTTP01 challenge flow.\nIt is not possible to obtain certificates for wildcard domain names\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.", "type": "object", "properties": {"gatewayHTTPRoute": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01Gatewayhttproute", "description": "The Gateway API is a sig-network community API that models service networking\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\nThis solver is experimental, and fields / behaviour may change in the future."}, "ingress": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01Ingress", "description": "The ingress based HTTP01 challenge solver will solve challenges by\ncreating or modifying Ingress resources in order to route requests for\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\nprovisioned by cert-manager for each Challenge to be completed."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverSelector": {"description": "Selector selects a set of DNSNames on the Certificate resource that\nshould be solved using this challenge solver.\nIf not specified, the solver will be treated as the 'default' solver\nwith the lowest priority, i.e. if any other solver has a more specific\nmatch, it will be used instead.", "type": "object", "properties": {"dnsNames": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverSelectorDnsnames"}, "description": "List of DNSNames that this solver will be used to solve.\nIf specified and a match is found, a dnsNames selector will take\nprecedence over a dnsZones selector.\nIf multiple solvers match with the same dnsNames value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "manifests_processed": true}, "dnsZones": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverSelectorDnszones"}, "description": "List of DNSZones that this solver will be used to solve.\nThe most specific DNS zone match specified here will take precedence\nover other DNS zone matches, so a solver specifying sys.example.com\nwill be selected over one specifying example.com for the domain\nwww.sys.example.com.\nIf multiple solvers match with the same dnsZones value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "manifests_processed": true}, "matchLabels": {"description": "A label selector that is used to refine the set of certificate's that\nthis challenge solver will apply to.", "type": "object", "additionalProperties": {"type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Acmedns": {"description": "Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\nDNS01 challenge records.", "type": "object", "required": ["accountSecretRef", "host"], "properties": {"accountSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AcmednsAccountsecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}, "host": {"type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Akamai": {"description": "Use the Akamai DNS zone management API to manage DNS01 challenge records.", "type": "object", "required": ["accessTokenSecretRef", "clientSecretSecretRef", "clientTokenSecretRef", "serviceConsumerDomain"], "properties": {"accessTokenSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiAccesstokensecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}, "clientSecretSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiClientsecretsecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}, "clientTokenSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiClienttokensecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}, "serviceConsumerDomain": {"type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Azuredns": {"description": "Use the Microsoft Azure DNS API to manage DNS01 challenge records.", "type": "object", "required": ["resourceGroupName", "subscriptionID"], "properties": {"clientID": {"description": "Auth: Azure Service Principal:\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientSecret and TenantID must also be set.", "type": "string"}, "clientSecretSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AzurednsClientsecretsecretref", "description": "Auth: Azure Service Principal:\nA reference to a Secret containing the password associated with the Service Principal.\nIf set, ClientID and TenantID must also be set."}, "environment": {"description": "name of the Azure environment (default AzurePublicCloud)", "type": "string", "enum": ["AzurePublicCloud", "AzureChinaCloud", "AzureGermanCloud", "AzureUSGovernmentCloud"]}, "hostedZoneName": {"description": "name of the DNS zone that should be used", "type": "string"}, "managedIdentity": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01AzurednsManagedidentity", "description": "Auth: Azure Workload Identity or Azure Managed Service Identity:\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\nIf set, ClientID, ClientSecret and TenantID must not be set."}, "resourceGroupName": {"description": "resource group the DNS zone is located in", "type": "string"}, "subscriptionID": {"description": "ID of the Azure subscription", "type": "string"}, "tenantID": {"description": "Auth: Azure Service Principal:\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientID and ClientSecret must also be set.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Clouddns": {"description": "Use the Google Cloud DNS API to manage DNS01 challenge records.", "type": "object", "required": ["project"], "properties": {"hostedZoneName": {"description": "HostedZoneName is an optional field that tells cert-manager in which\nCloud DNS zone the challenge record has to be created.\nIf left empty cert-manager will automatically choose a zone.", "type": "string"}, "project": {"type": "string"}, "serviceAccountSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01ClouddnsServiceaccountsecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Cloudflare": {"description": "Use the Cloudflare API to manage DNS01 challenge records.", "type": "object", "properties": {"apiKeySecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01CloudflareApikeysecretref", "description": "API key to use to authenticate with Cloudflare.\nNote: using an API token to authenticate is now the recommended method\nas it allows greater control of permissions."}, "apiTokenSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01CloudflareApitokensecretref", "description": "API token used to authenticate with Cloudflare."}, "email": {"description": "Email of the account, only required when using API key based authentication.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Digitalocean": {"description": "Use the DigitalOcean DNS API to manage DNS01 challenge records.", "type": "object", "required": ["tokenSecretRef"], "properties": {"tokenSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokensecretref", "description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Rfc2136": {"description": "Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/)\nto manage DNS01 challenge records.", "type": "object", "required": ["nameserver"], "properties": {"nameserver": {"description": "The IP address or hostname of an authoritative DNS server supporting\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\nThis field is required.", "type": "string"}, "tsigAlgorithm": {"description": "The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\nSupported values are (case-insensitive): ``HMACMD5`` (default),\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.", "type": "string"}, "tsigKeyName": {"description": "The TSIG Key name configured in the DNS.\nIf ``tsigSecretSecretRef`` is defined, this field is required.", "type": "string"}, "tsigSecretSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Rfc2136Tsigsecretsecretref", "description": "The name of the secret containing the TSIG value.\nIf ``tsigKeyName`` is defined, this field is required."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53": {"description": "Use the AWS Route53 API to manage DNS01 challenge records.", "type": "object", "required": ["region"], "properties": {"accessKeyID": {"description": "The AccessKeyID is used for authentication.\nCannot be set when SecretAccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "string"}, "accessKeyIDSecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53Accesskeyidsecretref", "description": "The SecretAccessKey is used for authentication. If set, pull the AWS\naccess key ID from a key within a Kubernetes Secret.\nCannot be set when AccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials"}, "hostedZoneID": {"description": "If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.", "type": "string"}, "region": {"description": "Always set the region when using AccessKeyID and SecretAccessKey", "type": "string"}, "role": {"description": "Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata", "type": "string"}, "secretAccessKeySecretRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53Secretaccesskeysecretref", "description": "The SecretAccessKey is used for authentication.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Webhook": {"description": "Configure an external webhook based DNS01 challenge solver to manage\nDNS01 challenge records.", "type": "object", "required": ["groupName", "solverName"], "properties": {"config": {"description": "Additional configuration that should be passed to the webhook apiserver\nwhen challenges are processed.\nThis can contain arbitrary JSON data.\nSecret values should not be specified in this stanza.\nIf secret values are needed (e.g. credentials for a DNS service), you\nshould use a SecretKeySelector to reference a Secret resource.\nFor details on the schema of this field, consult the webhook provider\nimplementation's documentation.", "x-kubernetes-preserve-unknown-fields": true}, "groupName": {"description": "The API group name that should be used when POSTing ChallengePayload\nresources to the webhook apiserver.\nThis should be the same as the GroupName specified in the webhook\nprovider implementation.", "type": "string"}, "solverName": {"description": "The name of the solver to use, as defined in the webhook provider\nimplementation.\nThis will typically be the name of the provider, e.g. 'cloudflare'.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01Gatewayhttproute": {"description": "The Gateway API is a sig-network community API that models service networking\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\nThis solver is experimental, and fields / behaviour may change in the future.", "type": "object", "properties": {"labels": {"description": "Custom labels that will be applied to HTTPRoutes created by cert-manager\nwhile solving HTTP-01 challenges.", "type": "object", "additionalProperties": {"type": "string"}}, "parentRefs": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01GatewayhttprouteParentrefs"}, "description": "When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\ncert-manager needs to know which parentRefs should be used when creating\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways", "manifests_processed": true}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01Ingress": {"description": "The ingress based HTTP01 challenge solver will solve challenges by\ncreating or modifying Ingress resources in order to route requests for\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\nprovisioned by cert-manager for each Challenge to be completed.", "type": "object", "properties": {"class": {"description": "This field configures the annotation `kubernetes.io/ingress.class` when\ncreating Ingress resources to solve ACME challenges that use this\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "ingressClassName": {"description": "This field configures the field `ingressClassName` on the created Ingress\nresources used to solve ACME challenges that use this challenge solver.\nThis is the recommended way of configuring the ingress class. Only one of\n`class`, `name` or `ingressClassName` may be specified.", "type": "string"}, "ingressTemplate": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplate", "description": "Optional ingress template used to configure the ACME challenge solver\ningress used for HTTP01 challenges."}, "name": {"description": "The name of the ingress resource that should have ACME challenge solving\nroutes inserted into it in order to solve HTTP01 challenges.\nThis is typically used in conjunction with ingress controllers like\ningress-gce, which maintains a 1:1 mapping between external IPs and\ningress resources. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "podTemplate": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplate", "description": "Optional pod template used to configure the ACME challenge solver pods\nused for HTTP01 challenges."}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverSelectorDnsnames": {"description": "List of DNSNames that this solver will be used to solve.\nIf specified and a match is found, a dnsNames selector will take\nprecedence over a dnsZones selector.\nIf multiple solvers match with the same dnsNames value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.acme.v1.ChallengeSpecSolverSelectorDnszones": {"description": "List of DNSZones that this solver will be used to solve.\nThe most specific DNS zone match specified here will take precedence\nover other DNS zone matches, so a solver specifying sys.example.com\nwill be selected over one specifying example.com for the domain\nwww.sys.example.com.\nIf multiple solvers match with the same dnsZones value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AcmednsAccountsecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiAccesstokensecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiClientsecretsecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AkamaiClienttokensecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AzurednsClientsecretsecretref": {"description": "Auth: Azure Service Principal:\nA reference to a Secret containing the password associated with the Service Principal.\nIf set, ClientID and TenantID must also be set.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01AzurednsManagedidentity": {"description": "Auth: Azure Workload Identity or Azure Managed Service Identity:\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\nIf set, ClientID, ClientSecret and TenantID must not be set.", "type": "object", "properties": {"clientID": {"description": "client ID of the managed identity, can not be used at the same time as resourceID", "type": "string"}, "resourceID": {"description": "resource ID of the managed identity, can not be used at the same time as clientID\nCannot be used for Azure Managed Service Identity", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01ClouddnsServiceaccountsecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01CloudflareApikeysecretref": {"description": "API key to use to authenticate with Cloudflare.\nNote: using an API token to authenticate is now the recommended method\nas it allows greater control of permissions.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01CloudflareApitokensecretref": {"description": "API token used to authenticate with Cloudflare.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokensecretref": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Rfc2136Tsigsecretsecretref": {"description": "The name of the secret containing the TSIG value.\nIf ``tsigKeyName`` is defined, this field is required.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53Accesskeyidsecretref": {"description": "The SecretAccessKey is used for authentication. If set, pull the AWS\naccess key ID from a key within a Kubernetes Secret.\nCannot be set when AccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverDns01Route53Secretaccesskeysecretref": {"description": "The SecretAccessKey is used for authentication.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01GatewayhttprouteParentrefs": {"description": "When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\ncert-manager needs to know which parentRefs should be used when creating\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways", "type": "array", "items": {"description": "ParentReference identifies an API object (usually a Gateway) that can be considered\na parent of this resource (usually a route). There are two kinds of parent resources\nwith \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nThis API may be extended in the future to support additional kinds of parent\nresources.\n\n\nThe API object must be valid in the cluster; the Group and Kind must\nbe registered in the cluster for this reference to be valid.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group is the group of the referent.\nWhen unspecified, \"gateway.networking.k8s.io\" is inferred.\nTo set the core API group (such as for a \"Service\" kind referent),\nGroup must be explicitly set to \"\" (empty string).\n\n\nSupport: Core", "type": "string", "default": "gateway.networking.k8s.io", "maxLength": 253, "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}, "kind": {"description": "Kind is kind of the referent.\n\n\nThere are two kinds of parent resources with \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nSupport for other resources is Implementation-Specific.", "type": "string", "default": "Gateway", "maxLength": 63, "minLength": 1, "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"}, "name": {"description": "Name is the name of the referent.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1}, "namespace": {"description": "Namespace is the namespace of the referent. When unspecified, this refers\nto the local namespace of the Route.\n\n\nNote that there are specific rules for ParentRefs which cross namespace\nboundaries. Cross-namespace references are only valid if they are explicitly\nallowed by something in the namespace they are referring to. For example:\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\ngeneric way to enable any other kind of cross-namespace reference.\n\n\n<gateway:experimental:description>\nParentRefs from a Route to a Service in the same namespace are \"producer\"\nroutes, which apply default routing rules to inbound connections from\nany namespace to the Service.\n\n\nParentRefs from a Route to a Service in a different namespace are\n\"consumer\" routes, and these routing rules are only applied to outbound\nconnections originating from the same namespace as the Route, for which\nthe intended destination of the connections are a Service targeted as a\nParentRef of the Route.\n</gateway:experimental:description>\n\n\nSupport: Core", "type": "string", "maxLength": 63, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"}, "port": {"description": "Port is the network port this Route targets. It can be interpreted\ndifferently based on the type of parent resource.\n\n\nWhen the parent resource is a Gateway, this targets all listeners\nlistening on the specified port that also support this kind of Route(and\nselect this Route). It's not recommended to set `Port` unless the\nnetworking behaviors specified in a Route must apply to a specific port\nas opposed to a listener(s) whose port(s) may be changed. When both Port\nand SectionName are specified, the name and port of the selected listener\nmust match both specified values.\n\n\n<gateway:experimental:description>\nWhen the parent resource is a Service, this targets a specific port in the\nService spec. When both Port (experimental) and SectionName are specified,\nthe name and port of the selected port must match both specified values.\n</gateway:experimental:description>\n\n\nImplementations MAY choose to support other parent resources.\nImplementations supporting other types of parent resources MUST clearly\ndocument how/if Port is interpreted.\n\n\nFor the purpose of status, an attachment is considered successful as\nlong as the parent resource accepts it partially. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\nfrom the referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route,\nthe Route MUST be considered detached from the Gateway.\n\n\nSupport: Extended\n\n\n<gateway:experimental>", "type": "integer", "format": "int32", "maximum": 65535, "minimum": 1}, "sectionName": {"description": "SectionName is the name of a section within the target resource. In the\nfollowing resources, SectionName is interpreted as the following:\n\n\n* Gateway: Listener Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n* Service: Port Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values. Note that attaching Routes to Services as Parents\nis part of experimental Mesh support and is not supported for any other\npurpose.\n\n\nImplementations MAY choose to support attaching Routes to other resources.\nIf that is the case, they MUST clearly document how SectionName is\ninterpreted.\n\n\nWhen unspecified (empty string), this will reference the entire resource.\nFor the purpose of status, an attachment is considered successful if at\nleast one section in the parent resource accepts it. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\nthe referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route, the\nRoute MUST be considered detached from the Gateway.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplate": {"description": "Optional ingress template used to configure the ACME challenge solver\ningress used for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplateMetadata", "description": "ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplate": {"description": "Optional pod template used to configure the ACME challenge solver pods\nused for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateMetadata", "description": "ObjectMeta overrides for the pod used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values."}, "spec": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpec", "description": "PodSpec defines overrides for the HTTP01 challenge solver pod.\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\nAll other fields will be ignored."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplateMetadata": {"description": "ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateMetadata": {"description": "ObjectMeta overrides for the pod used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the create ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpec": {"description": "PodSpec defines overrides for the HTTP01 challenge solver pod.\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\nAll other fields will be ignored.", "type": "object", "properties": {"affinity": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinity", "description": "If specified, the pod's scheduling constraints"}, "imagePullSecrets": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecImagepullsecrets"}, "description": "If specified, the pod's imagePullSecrets", "manifests_processed": true}, "nodeSelector": {"description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/", "type": "object", "additionalProperties": {"type": "string"}}, "priorityClassName": {"description": "If specified, the pod's priorityClassName.", "type": "string"}, "serviceAccountName": {"description": "If specified, the pod's service account", "type": "string"}, "tolerations": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerations"}, "description": "If specified, the pod's tolerations.", "manifests_processed": true}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinity": {"description": "If specified, the pod's scheduling constraints", "type": "object", "properties": {"nodeAffinity": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinity", "description": "Describes node affinity scheduling rules for the pod."}, "podAffinity": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinity", "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."}, "podAntiAffinity": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinity", "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecImagepullsecrets": {"description": "If specified, the pod's imagePullSecrets", "type": "array", "items": {"description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.", "type": "object", "properties": {"name": {"description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?", "type": "string"}}, "x-kubernetes-map-type": "atomic"}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerations": {"description": "If specified, the pod's tolerations.", "type": "array", "items": {"description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.", "type": "object", "properties": {"effect": {"description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.", "type": "string"}, "key": {"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.", "type": "string"}, "operator": {"description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.", "type": "string"}, "tolerationSeconds": {"description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.", "type": "integer", "format": "int64"}, "value": {"description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.", "type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinity": {"description": "Describes node affinity scheduling rules for the pod.", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution"}, "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.", "manifests_processed": true}, "requiredDuringSchedulingIgnoredDuringExecution": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution", "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node."}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinity": {"description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution"}, "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "manifests_processed": true}, "requiredDuringSchedulingIgnoredDuringExecution": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution"}, "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "manifests_processed": true}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinity": {"description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution"}, "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "manifests_processed": true}, "requiredDuringSchedulingIgnoredDuringExecution": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution"}, "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "manifests_processed": true}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", "type": "object", "required": ["preference", "weight"], "properties": {"preference": {"description": "A node selector term, associated with the corresponding weight.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}, "weight": {"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", "type": "integer", "format": "int32"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.", "type": "object", "required": ["nodeSelectorTerms"], "properties": {"nodeSelectorTerms": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms"}, "description": "Required. A list of node selector terms. The terms are ORed.", "manifests_processed": true}}, "x-kubernetes-map-type": "atomic"}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution": {"description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}, "io.cert-manager.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms": {"description": "Required. A list of node selector terms. The terms are ORed.", "type": "array", "items": {"description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}}, "io.cert-manager.v1.Certificate": {"description": "A Certificate resource should be created to ensure an up to date and signed\nX.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.\n\n\nThe stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).", "type": "object", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpec", "description": "Specification of the desired state of the Certificate resource.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"}, "status": {"$ref": "#/definitions/io.cert-manager.v1.CertificateStatus", "description": "Status of the Certificate.\nThis is set and managed automatically.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager", "version": "v1", "kind": "Certificate"}]}, "io.cert-manager.v1.CertificateSpec": {"description": "Specification of the desired state of the Certificate resource.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", "type": "object", "required": ["issuerRef", "secretName"], "properties": {"additionalOutputFormats": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecAdditionaloutputformats"}, "description": "Defines extra output formats of the private key and signed certificate chain\nto be written to this Certificate's target Secret.\n\n\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=AdditionalCertificateOutputFormats=true` option set on both\nthe controller and webhook components.", "manifests_processed": true}, "commonName": {"description": "Requested common name X509 certificate subject attribute.\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\nNOTE: TLS clients will ignore this value when any subject alternative name is\nset (see https://tools.ietf.org/html/rfc6125#section-6.4.4).\n\n\nShould have a length of 64 characters or fewer to avoid generating invalid CSRs.\nCannot be set if the `literalSubject` field is set.", "type": "string"}, "dnsNames": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecDnsnames"}, "description": "Requested DNS subject alternative names.", "manifests_processed": true}, "duration": {"description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\nissuer may choose to ignore the requested duration, just like any other\nrequested attribute.\n\n\nIf unset, this defaults to 90 days.\nMinimum accepted duration is 1 hour.\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.", "type": "string"}, "emailAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecEmailaddresses"}, "description": "Requested email subject alternative names.", "manifests_processed": true}, "encodeUsagesInRequest": {"description": "Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.\n\n\nThis option defaults to true, and should only be disabled if the target\nissuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.", "type": "boolean"}, "ipAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecIpaddresses"}, "description": "Requested IP address subject alternative names.", "manifests_processed": true}, "isCA": {"description": "Requested basic constraints isCA value.\nThe isCA value is used to set the `isCA` field on the created CertificateRequest\nresources. Note that the issuer may choose to ignore the requested isCA value, just\nlike any other requested attribute.\n\n\nIf true, this will automatically add the `cert sign` usage to the list\nof requested `usages`.", "type": "boolean"}, "issuerRef": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecIssuerref", "description": "Reference to the issuer responsible for issuing the certificate.\nIf the issuer is namespace-scoped, it must be in the same namespace\nas the Certificate. If the issuer is cluster-scoped, it can be used\nfrom any namespace.\n\n\nThe `name` field of the reference must always be specified."}, "keystores": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecKeystores", "description": "Additional keystore output formats to be stored in the Certificate's Secret."}, "literalSubject": {"description": "Requested X.509 certificate subject, represented using the LDAP \"String\nRepresentation of a Distinguished Name\" [1].\nImportant: the LDAP string format also specifies the order of the attributes\nin the subject, this is important when issuing certs for LDAP authentication.\nExample: `CN=foo,DC=corp,DC=example,DC=com`\nMore info [1]: https://datatracker.ietf.org/doc/html/rfc4514\nMore info: https://github.com/cert-manager/cert-manager/issues/3203\nMore info: https://github.com/cert-manager/cert-manager/issues/4424\n\n\nCannot be set if the `subject` or `commonName` field is set.\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=LiteralCertificateSubject=true` option set on both\nthe controller and webhook components.", "type": "string"}, "nameConstraints": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraints", "description": "x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.\nMore Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10\n\n\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=NameConstraints=true` option set on both\nthe controller and webhook components."}, "otherNames": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecOthernames"}, "description": "`otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37\nAny UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.\nMost commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3\nYou should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.", "manifests_processed": true}, "privateKey": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecPrivatekey", "description": "Private key options. These include the key algorithm and size, the used\nencoding and the rotation policy."}, "renewBefore": {"description": "How long before the currently issued certificate's expiry cert-manager should\nrenew the certificate. For example, if a certificate is valid for 60 minutes,\nand `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate\n50 minutes after it was issued (i.e. when there are 10 minutes remaining until\nthe certificate is no longer valid).\n\n\nNOTE: The actual lifetime of the issued certificate is used to determine the\nrenewal time. If an issuer returns a certificate with a different lifetime than\nthe one requested, cert-manager will use the lifetime of the issued certificate.\n\n\nIf unset, this defaults to 1/3 of the issued certificate's lifetime.\nMinimum accepted value is 5 minutes.\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.", "type": "string"}, "revisionHistoryLimit": {"description": "The maximum number of CertificateRequest revisions that are maintained in\nthe Certificate's history. Each revision represents a single `CertificateRequest`\ncreated by this Certificate, either when it was created, renewed, or Spec\nwas changed. Revisions will be removed by oldest first if the number of\nrevisions exceeds this number.\n\n\nIf set, revisionHistoryLimit must be a value of `1` or greater.\nIf unset (`nil`), revisions will not be garbage collected.\nDefault value is `nil`.", "type": "integer", "format": "int32"}, "secretName": {"description": "Name of the Secret resource that will be automatically created and\nmanaged by this Certificate resource. It will be populated with a\nprivate key and certificate, signed by the denoted issuer. The Secret\nresource lives in the same namespace as the Certificate resource.", "type": "string"}, "secretTemplate": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSecrettemplate", "description": "Defines annotations and labels to be copied to the Certificate's Secret.\nLabels and annotations on the Secret will be changed as they appear on the\nSecretTemplate when added or removed. SecretTemplate annotations are added\nin conjunction with, and cannot overwrite, the base set of annotations\ncert-manager sets on the Certificate's Secret."}, "subject": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubject", "description": "Requested set of X509 certificate subject attributes.\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\n\n\nThe common name attribute is specified separately in the `commonName` field.\nCannot be set if the `literalSubject` field is set."}, "uris": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecUris"}, "description": "Requested URI subject alternative names.", "manifests_processed": true}, "usages": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecUsages"}, "description": "Requested key usages and extended key usages.\nThese usages are used to set the `usages` field on the created CertificateRequest\nresources. If `encodeUsagesInRequest` is unset or set to `true`, the usages\nwill additionally be encoded in the `request` field which contains the CSR blob.\n\n\nIf unset, defaults to `digital signature` and `key encipherment`.", "manifests_processed": true}}}, "io.cert-manager.v1.CertificateStatus": {"description": "Status of the Certificate.\nThis is set and managed automatically.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", "type": "object", "properties": {"conditions": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateStatusConditions"}, "description": "List of status conditions to indicate the status of certificates.\nKnown condition types are `Ready` and `Issuing`.", "manifests_processed": true}, "failedIssuanceAttempts": {"description": "The number of continuous failed issuance attempts up till now. This\nfield gets removed (if set) on a successful issuance and gets set to\n1 if unset and an issuance has failed. If an issuance has failed, the\ndelay till the next issuance will be calculated using formula\ntime.Hour * 2 ^ (failedIssuanceAttempts - 1).", "type": "integer"}, "lastFailureTime": {"description": "LastFailureTime is set only if the lastest issuance for this\nCertificate failed and contains the time of the failure. If an\nissuance has failed, the delay till the next issuance will be\ncalculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -\n1). If the latest issuance has succeeded this field will be unset.", "type": "string", "format": "date-time"}, "nextPrivateKeySecretName": {"description": "The name of the Secret resource containing the private key to be used\nfor the next certificate iteration.\nThe keymanager controller will automatically set this field if the\n`Issuing` condition is set to `True`.\nIt will automatically unset this field when the Issuing condition is\nnot set or False.", "type": "string"}, "notAfter": {"description": "The expiration time of the certificate stored in the secret named\nby this resource in `spec.secretName`.", "type": "string", "format": "date-time"}, "notBefore": {"description": "The time after which the certificate stored in the secret named\nby this resource in `spec.secretName` is valid.", "type": "string", "format": "date-time"}, "renewalTime": {"description": "RenewalTime is the time at which the certificate will be next\nrenewed.\nIf not set, no upcoming renewal is scheduled.", "type": "string", "format": "date-time"}, "revision": {"description": "The current 'revision' of the certificate as issued.\n\n\nWhen a CertificateRequest resource is created, it will have the\n`cert-manager.io/certificate-revision` set to one greater than the\ncurrent value of this field.\n\n\nUpon issuance, this field will be set to the value of the annotation\non the CertificateRequest resource used to issue the certificate.\n\n\nPersisting the value on the CertificateRequest resource allows the\ncertificates controller to know whether a request is part of an old\nissuance or if it is part of the ongoing revision's issuance by\nchecking if the revision value in the annotation is greater than this\nfield.", "type": "integer"}}}, "io.cert-manager.v1.CertificateSpecAdditionaloutputformats": {"description": "Defines extra output formats of the private key and signed certificate chain\nto be written to this Certificate's target Secret.\n\n\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=AdditionalCertificateOutputFormats=true` option set on both\nthe controller and webhook components.", "type": "array", "items": {"description": "CertificateAdditionalOutputFormat defines an additional output format of a\nCertificate resource. These contain supplementary data formats of the signed\ncertificate chain and paired private key.", "type": "object", "required": ["type"], "properties": {"type": {"description": "Type is the name of the format type that should be written to the\nCertificate's target Secret.", "type": "string", "enum": ["DER", "CombinedPEM"]}}}}, "io.cert-manager.v1.CertificateSpecDnsnames": {"description": "Requested DNS subject alternative names.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecEmailaddresses": {"description": "Requested email subject alternative names.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecIpaddresses": {"description": "Requested IP address subject alternative names.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecIssuerref": {"description": "Reference to the issuer responsible for issuing the certificate.\nIf the issuer is namespace-scoped, it must be in the same namespace\nas the Certificate. If the issuer is cluster-scoped, it can be used\nfrom any namespace.\n\n\nThe `name` field of the reference must always be specified.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group of the resource being referred to.", "type": "string"}, "kind": {"description": "Kind of the resource being referred to.", "type": "string"}, "name": {"description": "Name of the resource being referred to.", "type": "string"}}}, "io.cert-manager.v1.CertificateSpecKeystores": {"description": "Additional keystore output formats to be stored in the Certificate's Secret.", "type": "object", "properties": {"jks": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecKeystoresJks", "description": "JKS configures options for storing a JKS keystore in the\n`spec.secretName` Secret resource."}, "pkcs12": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecKeystoresPkcs12", "description": "PKCS12 configures options for storing a PKCS12 keystore in the\n`spec.secretName` Secret resource."}}}, "io.cert-manager.v1.CertificateSpecNameconstraints": {"description": "x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.\nMore Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10\n\n\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=NameConstraints=true` option set on both\nthe controller and webhook components.", "type": "object", "properties": {"critical": {"description": "if true then the name constraints are marked critical.", "type": "boolean"}, "excluded": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsExcluded", "description": "Excluded contains the constraints which must be disallowed. Any name matching a\nrestriction in the excluded field is invalid regardless\nof information appearing in the permitted"}, "permitted": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsPermitted", "description": "Permitted contains the constraints in which the names must be located."}}}, "io.cert-manager.v1.CertificateSpecOthernames": {"description": "`otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37\nAny UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.\nMost commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3\nYou should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.", "type": "array", "items": {"type": "object", "properties": {"oid": {"description": "OID is the object identifier for the otherName SAN.\nThe object identifier must be expressed as a dotted string, for\nexample, \"1.2.840.113556.1.4.221\".", "type": "string"}, "utf8Value": {"description": "utf8Value is the string value of the otherName SAN.\nThe utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.", "type": "string"}}}}, "io.cert-manager.v1.CertificateSpecPrivatekey": {"description": "Private key options. These include the key algorithm and size, the used\nencoding and the rotation policy.", "type": "object", "properties": {"algorithm": {"description": "Algorithm is the private key algorithm of the corresponding private key\nfor this certificate.\n\n\nIf provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.\nIf `algorithm` is specified and `size` is not provided,\nkey size of 2048 will be used for `RSA` key algorithm and\nkey size of 256 will be used for `ECDSA` key algorithm.\nkey size is ignored when using the `Ed25519` key algorithm.", "type": "string", "enum": ["RSA", "ECDSA", "Ed25519"]}, "encoding": {"description": "The private key cryptography standards (PKCS) encoding for this\ncertificate's private key to be encoded in.\n\n\nIf provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1\nand PKCS#8, respectively.\nDefaults to `PKCS1` if not specified.", "type": "string", "enum": ["PKCS1", "PKCS8"]}, "rotationPolicy": {"description": "RotationPolicy controls how private keys should be regenerated when a\nre-issuance is being processed.\n\n\nIf set to `Never`, a private key will only be generated if one does not\nalready exist in the target `spec.secretName`. If one does exists but it\ndoes not have the correct algorithm or size, a warning will be raised\nto await user intervention.\nIf set to `Always`, a private key matching the specified requirements\nwill be generated whenever a re-issuance occurs.\nDefault is `Never` for backward compatibility.", "type": "string", "enum": ["Never", "Always"]}, "size": {"description": "Size is the key bit size of the corresponding private key for this certificate.\n\n\nIf `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,\nand will default to `2048` if not specified.\nIf `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,\nand will default to `256` if not specified.\nIf `algorithm` is set to `Ed25519`, Size is ignored.\nNo other values are allowed.", "type": "integer"}}}, "io.cert-manager.v1.CertificateSpecSecrettemplate": {"description": "Defines annotations and labels to be copied to the Certificate's Secret.\nLabels and annotations on the Secret will be changed as they appear on the\nSecretTemplate when added or removed. SecretTemplate annotations are added\nin conjunction with, and cannot overwrite, the base set of annotations\ncert-manager sets on the Certificate's Secret.", "type": "object", "properties": {"annotations": {"description": "Annotations is a key value map to be copied to the target Kubernetes Secret.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels is a key value map to be copied to the target Kubernetes Secret.", "type": "object", "additionalProperties": {"type": "string"}}}}, "io.cert-manager.v1.CertificateSpecSubject": {"description": "Requested set of X509 certificate subject attributes.\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\n\n\nThe common name attribute is specified separately in the `commonName` field.\nCannot be set if the `literalSubject` field is set.", "type": "object", "properties": {"countries": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectCountries"}, "description": "Countries to be used on the Certificate.", "manifests_processed": true}, "localities": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectLocalities"}, "description": "Cities to be used on the Certificate.", "manifests_processed": true}, "organizationalUnits": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectOrganizationalunits"}, "description": "Organizational Units to be used on the Certificate.", "manifests_processed": true}, "organizations": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectOrganizations"}, "description": "Organizations to be used on the Certificate.", "manifests_processed": true}, "postalCodes": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectPostalcodes"}, "description": "Postal codes to be used on the Certificate.", "manifests_processed": true}, "provinces": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectProvinces"}, "description": "State/Provinces to be used on the Certificate.", "manifests_processed": true}, "serialNumber": {"description": "Serial number to be used on the Certificate.", "type": "string"}, "streetAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecSubjectStreetaddresses"}, "description": "Street addresses to be used on the Certificate.", "manifests_processed": true}}}, "io.cert-manager.v1.CertificateSpecUris": {"description": "Requested URI subject alternative names.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecUsages": {"description": "Requested key usages and extended key usages.\nThese usages are used to set the `usages` field on the created CertificateRequest\nresources. If `encodeUsagesInRequest` is unset or set to `true`, the usages\nwill additionally be encoded in the `request` field which contains the CSR blob.\n\n\nIf unset, defaults to `digital signature` and `key encipherment`.", "type": "array", "items": {"description": "KeyUsage specifies valid usage contexts for keys.\nSee:\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\n\n\nValid KeyUsage values are as follows:\n\"signing\",\n\"digital signature\",\n\"content commitment\",\n\"key encipherment\",\n\"key agreement\",\n\"data encipherment\",\n\"cert sign\",\n\"crl sign\",\n\"encipher only\",\n\"decipher only\",\n\"any\",\n\"server auth\",\n\"client auth\",\n\"code signing\",\n\"email protection\",\n\"s/mime\",\n\"ipsec end system\",\n\"ipsec tunnel\",\n\"ipsec user\",\n\"timestamping\",\n\"ocsp signing\",\n\"microsoft sgc\",\n\"netscape sgc\"", "type": "string", "enum": ["signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"]}}, "io.cert-manager.v1.CertificateStatusConditions": {"description": "List of status conditions to indicate the status of certificates.\nKnown condition types are `Ready` and `Issuing`.", "type": "array", "items": {"description": "CertificateCondition contains condition information for an Certificate.", "type": "object", "required": ["status", "type"], "properties": {"lastTransitionTime": {"description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.", "type": "string", "format": "date-time"}, "message": {"description": "Message is a human readable description of the details of the last\ntransition, complementing reason.", "type": "string"}, "observedGeneration": {"description": "If set, this represents the .metadata.generation that the condition was\nset based upon.\nFor instance, if .metadata.generation is currently 12, but the\n.status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the Certificate.", "type": "integer", "format": "int64"}, "reason": {"description": "Reason is a brief machine readable explanation for the condition's last\ntransition.", "type": "string"}, "status": {"description": "Status of the condition, one of (`True`, `False`, `Unknown`).", "type": "string", "enum": ["True", "False", "Unknown"]}, "type": {"description": "Type of the condition, known values are (`Ready`, `Issuing`).", "type": "string"}}}, "x-kubernetes-list-map-keys": ["type"], "x-kubernetes-list-type": "map"}, "io.cert-manager.v1.CertificateSpecKeystoresJks": {"description": "JKS configures options for storing a JKS keystore in the\n`spec.secretName` Secret resource.", "type": "object", "required": ["create", "passwordSecretRef"], "properties": {"alias": {"description": "Alias specifies the alias of the key in the keystore, required by the JKS format.\nIf not provided, the default alias `certificate` will be used.", "type": "string"}, "create": {"description": "Create enables JKS keystore creation for the Certificate.\nIf true, a file named `keystore.jks` will be created in the target\nSecret resource, encrypted using the password stored in\n`passwordSecretRef`.\nThe keystore file will be updated immediately.\nIf the issuer provided a CA certificate, a file named `truststore.jks`\nwill also be created in the target Secret resource, encrypted using the\npassword stored in `passwordSecretRef`\ncontaining the issuing Certificate Authority", "type": "boolean"}, "passwordSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecKeystoresJksPasswordsecretref", "description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the JKS keystore."}}}, "io.cert-manager.v1.CertificateSpecKeystoresPkcs12": {"description": "PKCS12 configures options for storing a PKCS12 keystore in the\n`spec.secretName` Secret resource.", "type": "object", "required": ["create", "passwordSecretRef"], "properties": {"create": {"description": "Create enables PKCS12 keystore creation for the Certificate.\nIf true, a file named `keystore.p12` will be created in the target\nSecret resource, encrypted using the password stored in\n`passwordSecretRef`.\nThe keystore file will be updated immediately.\nIf the issuer provided a CA certificate, a file named `truststore.p12` will\nalso be created in the target Secret resource, encrypted using the\npassword stored in `passwordSecretRef` containing the issuing Certificate\nAuthority", "type": "boolean"}, "passwordSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecKeystoresPkcs12Passwordsecretref", "description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the PKCS12 keystore."}, "profile": {"description": "Profile specifies the key and certificate encryption algorithms and the HMAC algorithm\nused to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.\n\n\nIf provided, allowed values are:\n`LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.\n`LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.\n`Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms\n(eg. because of company policy). Please note that the security of the algorithm is not that important\nin reality, because the unencrypted certificate and private key are also stored in the Secret.", "type": "string", "enum": ["LegacyRC2", "LegacyDES", "Modern2023"]}}}, "io.cert-manager.v1.CertificateSpecNameconstraintsExcluded": {"description": "Excluded contains the constraints which must be disallowed. Any name matching a\nrestriction in the excluded field is invalid regardless\nof information appearing in the permitted", "type": "object", "properties": {"dnsDomains": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsExcludedDnsdomains"}, "description": "DNSDomains is a list of DNS domains that are permitted or excluded.", "manifests_processed": true}, "emailAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsExcludedEmailaddresses"}, "description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.", "manifests_processed": true}, "ipRanges": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsExcludedIpranges"}, "description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.", "manifests_processed": true}, "uriDomains": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsExcludedUridomains"}, "description": "URIDomains is a list of URI domains that are permitted or excluded.", "manifests_processed": true}}}, "io.cert-manager.v1.CertificateSpecNameconstraintsPermitted": {"description": "Permitted contains the constraints in which the names must be located.", "type": "object", "properties": {"dnsDomains": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsPermittedDnsdomains"}, "description": "DNSDomains is a list of DNS domains that are permitted or excluded.", "manifests_processed": true}, "emailAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsPermittedEmailaddresses"}, "description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.", "manifests_processed": true}, "ipRanges": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsPermittedIpranges"}, "description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.", "manifests_processed": true}, "uriDomains": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateSpecNameconstraintsPermittedUridomains"}, "description": "URIDomains is a list of URI domains that are permitted or excluded.", "manifests_processed": true}}}, "io.cert-manager.v1.CertificateSpecSubjectCountries": {"description": "Countries to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectLocalities": {"description": "Cities to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectOrganizationalunits": {"description": "Organizational Units to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectOrganizations": {"description": "Organizations to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectPostalcodes": {"description": "Postal codes to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectProvinces": {"description": "State/Provinces to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecSubjectStreetaddresses": {"description": "Street addresses to be used on the Certificate.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecKeystoresJksPasswordsecretref": {"description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the JKS keystore.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.CertificateSpecKeystoresPkcs12Passwordsecretref": {"description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the PKCS12 keystore.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.CertificateSpecNameconstraintsExcludedDnsdomains": {"description": "DNSDomains is a list of DNS domains that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsExcludedEmailaddresses": {"description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsExcludedIpranges": {"description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsExcludedUridomains": {"description": "URIDomains is a list of URI domains that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsPermittedDnsdomains": {"description": "DNSDomains is a list of DNS domains that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsPermittedEmailaddresses": {"description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsPermittedIpranges": {"description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateSpecNameconstraintsPermittedUridomains": {"description": "URIDomains is a list of URI domains that are permitted or excluded.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.Issuer": {"description": "An Issuer represents a certificate issuing authority which can be\nreferenced as part of `issuerRef` fields.\nIt is scoped to a single namespace and can therefore only be referenced by\nresources within the same namespace.", "type": "object", "required": ["spec"], "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpec", "description": "Desired state of the Issuer resource."}, "status": {"$ref": "#/definitions/io.cert-manager.v1.IssuerStatus", "description": "Status of the Issuer. This is set and managed automatically."}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager", "version": "v1", "kind": "Issuer"}]}, "io.cert-manager.v1.IssuerSpec": {"description": "Desired state of the Issuer resource.", "type": "object", "properties": {"acme": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecAcme", "description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server\nto obtain signed x509 certificates."}, "ca": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecCa", "description": "CA configures this issuer to sign certificates using a signing CA keypair\nstored in a Secret resource.\nThis is used to build internal PKIs that are managed by cert-manager."}, "selfSigned": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecSelfsigned", "description": "SelfSigned configures this issuer to 'self sign' certificates using the\nprivate key used to create the CertificateRequest object."}, "vault": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVault", "description": "Vault configures this issuer to sign certificates using a HashiCorp Vault\nPKI backend."}, "venafi": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVenafi", "description": "Venafi configures this issuer to sign certificates using a Venafi TPP\nor Venafi Cloud policy zone."}}}, "io.cert-manager.v1.IssuerStatus": {"description": "Status of the Issuer. This is set and managed automatically.", "type": "object", "properties": {"acme": {"$ref": "#/definitions/io.cert-manager.v1.IssuerStatusAcme", "description": "ACME specific status options.\nThis field should only be set if the Issuer is configured to use an ACME\nserver to issue certificates."}, "conditions": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerStatusConditions"}, "description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`.", "manifests_processed": true}}}, "io.cert-manager.v1.IssuerSpecAcme": {"description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server\nto obtain signed x509 certificates.", "type": "object", "required": ["privateKeySecretRef", "server"], "properties": {"caBundle": {"description": "Base64-encoded bundle of PEM CAs which can be used to validate the certificate\nchain presented by the ACME server.\nMutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various\nkinds of security vulnerabilities.\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\nthe container is used to validate the TLS connection.", "type": "string", "format": "byte"}, "disableAccountKeyGeneration": {"description": "Enables or disables generating a new ACME account key.\nIf true, the Issuer resource will *not* request a new account but will expect\nthe account key to be supplied via an existing secret.\nIf false, the cert-manager system will generate a new ACME account key\nfor the Issuer.\nDefaults to false.", "type": "boolean"}, "email": {"description": "Email is the email address to be associated with the ACME account.\nThis field is optional, but it is strongly recommended to be set.\nIt will be used to contact you in case of issues with your account or\ncertificates, including expiry notification emails.\nThis field may be updated after the account is initially registered.", "type": "string"}, "enableDurationFeature": {"description": "Enables requesting a Not After date on certificates that matches the\nduration of the certificate. This is not supported by all ACME servers\nlike Let's Encrypt. If set to true when the ACME server does not support\nit it will create an error on the Order.\nDefaults to false.", "type": "boolean"}, "externalAccountBinding": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecAcmeExternalaccountbinding", "description": "ExternalAccountBinding is a reference to a CA external account of the ACME\nserver.\nIf set, upon registration cert-manager will attempt to associate the given\nexternal account credentials with the registered ACME account."}, "preferredChain": {"description": "PreferredChain is the chain to use if the ACME server outputs multiple.\nPreferredChain is no guarantee that this one gets delivered by the ACME\nendpoint.\nFor example, for Let's Encrypt's DST crosssign you would use:\n\"DST Root CA X3\" or \"ISRG Root X1\" for the newer Let's Encrypt root CA.\nThis value picks the first certificate bundle in the combined set of\nACME default and alternative chains that has a root-most certificate with\nthis value as its issuer's commonname.", "type": "string", "maxLength": 64}, "privateKeySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecAcmePrivatekeysecretref", "description": "PrivateKey is the name of a Kubernetes Secret resource that will be used to\nstore the automatically generated ACME account private key.\nOptionally, a `key` may be specified to select a specific entry within\nthe named Secret resource.\nIf `key` is not specified, a default of `tls.key` will be used."}, "server": {"description": "Server is the URL used to access the ACME server's 'directory' endpoint.\nFor example, for Let's Encrypt's staging endpoint, you would use:\n\"https://acme-staging-v02.api.letsencrypt.org/directory\".\nOnly ACME v2 endpoints (i.e. RFC 8555) are supported.", "type": "string"}, "skipTLSVerify": {"description": "INSECURE: Enables or disables validation of the ACME server TLS certificate.\nIf true, requests to the ACME server will not have the TLS certificate chain\nvalidated.\nMutually exclusive with CABundle; prefer using CABundle to prevent various\nkinds of security vulnerabilities.\nOnly enable this option in development environments.\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\nthe container is used to validate the TLS connection.\nDefaults to false.", "type": "boolean"}, "solvers": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecAcmeSolvers"}, "description": "Solvers is a list of challenge solvers that will be used to solve\nACME challenges for the matching domains.\nSolver configurations must be provided in order to obtain certificates\nfrom an ACME server.\nFor more information, see: https://cert-manager.io/docs/configuration/acme/", "manifests_processed": true}}}, "io.cert-manager.v1.IssuerSpecCa": {"description": "CA configures this issuer to sign certificates using a signing CA keypair\nstored in a Secret resource.\nThis is used to build internal PKIs that are managed by cert-manager.", "type": "object", "required": ["secretName"], "properties": {"crlDistributionPoints": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecCaCrldistributionpoints"}, "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set, certificates will be issued without distribution points set.", "manifests_processed": true}, "issuingCertificateURLs": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecCaIssuingcertificateurls"}, "description": "IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\nAs an example, such a URL might be \"http://ca.domain.com/ca.crt\".", "manifests_processed": true}, "ocspServers": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecCaOcspservers"}, "description": "The OCSP server list is an X.509 v3 extension that defines a list of\nURLs of OCSP responders. The OCSP responders can be queried for the\nrevocation status of an issued certificate. If not set, the\ncertificate will be issued with no OCSP servers set. For example, an\nOCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".", "manifests_processed": true}, "secretName": {"description": "SecretName is the name of the secret used to sign Certificates issued\nby this Issuer.", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecSelfsigned": {"description": "SelfSigned configures this issuer to 'self sign' certificates using the\nprivate key used to create the CertificateRequest object.", "type": "object", "properties": {"crlDistributionPoints": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecSelfsignedCrldistributionpoints"}, "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set certificate will be issued without CDP. Values are strings.", "manifests_processed": true}}}, "io.cert-manager.v1.IssuerSpecVault": {"description": "Vault configures this issuer to sign certificates using a HashiCorp Vault\nPKI backend.", "type": "object", "required": ["auth", "path", "server"], "properties": {"auth": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuth", "description": "Auth configures how cert-manager authenticates with the Vault server."}, "caBundle": {"description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate\nchain presented by Vault. Only used if using HTTPS to connect to Vault and\nignored for HTTP connections.\nMutually exclusive with CABundleSecretRef.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.", "type": "string", "format": "byte"}, "caBundleSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultCabundlesecretref", "description": "Reference to a Secret containing a bundle of PEM-encoded CAs to use when\nverifying the certificate chain presented by Vault when using HTTPS.\nMutually exclusive with CABundle.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'."}, "clientCertSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultClientcertsecretref", "description": "Reference to a Secret containing a PEM-encoded Client Certificate to use when the\nVault server requires mTLS."}, "clientKeySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultClientkeysecretref", "description": "Reference to a Secret containing a PEM-encoded Client Private Key to use when the\nVault server requires mTLS."}, "namespace": {"description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\"\nMore about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces", "type": "string"}, "path": {"description": "Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:\n\"my_pki_mount/sign/my-role-name\".", "type": "string"}, "server": {"description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVenafi": {"description": "Venafi configures this issuer to sign certificates using a Venafi TPP\nor Venafi Cloud policy zone.", "type": "object", "required": ["zone"], "properties": {"cloud": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVenafiCloud", "description": "Cloud specifies the Venafi cloud configuration settings.\nOnly one of TPP or Cloud may be specified."}, "tpp": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVenafiTpp", "description": "TPP specifies Trust Protection Platform configuration settings.\nOnly one of TPP or Cloud may be specified."}, "zone": {"description": "Zone is the Venafi Policy Zone to use for this issuer.\nAll requests made to the Venafi platform will be restricted by the named\nzone policy.\nThis field is required.", "type": "string"}}}, "io.cert-manager.v1.IssuerStatusAcme": {"description": "ACME specific status options.\nThis field should only be set if the Issuer is configured to use an ACME\nserver to issue certificates.", "type": "object", "properties": {"lastPrivateKeyHash": {"description": "LastPrivateKeyHash is a hash of the private key associated with the latest\nregistered ACME account, in order to track changes made to registered account\nassociated with the Issuer", "type": "string"}, "lastRegisteredEmail": {"description": "LastRegisteredEmail is the email associated with the latest registered\nACME account, in order to track changes made to registered account\nassociated with the  Issuer", "type": "string"}, "uri": {"description": "URI is the unique account identifier, which can also be used to retrieve\naccount details from the CA", "type": "string"}}}, "io.cert-manager.v1.IssuerStatusConditions": {"description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`.", "type": "array", "items": {"description": "IssuerCondition contains condition information for an Issuer.", "type": "object", "required": ["status", "type"], "properties": {"lastTransitionTime": {"description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.", "type": "string", "format": "date-time"}, "message": {"description": "Message is a human readable description of the details of the last\ntransition, complementing reason.", "type": "string"}, "observedGeneration": {"description": "If set, this represents the .metadata.generation that the condition was\nset based upon.\nFor instance, if .metadata.generation is currently 12, but the\n.status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the Issuer.", "type": "integer", "format": "int64"}, "reason": {"description": "Reason is a brief machine readable explanation for the condition's last\ntransition.", "type": "string"}, "status": {"description": "Status of the condition, one of (`True`, `False`, `Unknown`).", "type": "string", "enum": ["True", "False", "Unknown"]}, "type": {"description": "Type of the condition, known values are (`Ready`).", "type": "string"}}}, "x-kubernetes-list-map-keys": ["type"], "x-kubernetes-list-type": "map"}, "io.cert-manager.v1.IssuerSpecAcmeExternalaccountbinding": {"description": "ExternalAccountBinding is a reference to a CA external account of the ACME\nserver.\nIf set, upon registration cert-manager will attempt to associate the given\nexternal account credentials with the registered ACME account.", "type": "object", "required": ["keyID", "keySecretRef"], "properties": {"keyAlgorithm": {"description": "Deprecated: keyAlgorithm field exists for historical compatibility\nreasons and should not be used. The algorithm is now hardcoded to HS256\nin golang/x/crypto/acme.", "type": "string", "enum": ["HS256", "HS384", "HS512"]}, "keyID": {"description": "keyID is the ID of the CA key that the External Account is bound to.", "type": "string"}, "keySecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecAcmeExternalaccountbindingKeysecretref", "description": "keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\nSecret which holds the symmetric MAC key of the External Account Binding.\nThe `key` is the index string that is paired with the key data in the\nSecret and should not be confused with the key data itself, or indeed with\nthe External Account Binding keyID above.\nThe secret key stored in the Secret **must** be un-padded, base64 URL\nencoded data."}}}, "io.cert-manager.v1.IssuerSpecAcmePrivatekeysecretref": {"description": "PrivateKey is the name of a Kubernetes Secret resource that will be used to\nstore the automatically generated ACME account private key.\nOptionally, a `key` may be specified to select a specific entry within\nthe named Secret resource.\nIf `key` is not specified, a default of `tls.key` will be used.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecAcmeSolvers": {"description": "Solvers is a list of challenge solvers that will be used to solve\nACME challenges for the matching domains.\nSolver configurations must be provided in order to obtain certificates\nfrom an ACME server.\nFor more information, see: https://cert-manager.io/docs/configuration/acme/", "type": "array", "items": {"description": "An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.\nA selector may be provided to use different solving strategies for different DNS names.\nOnly one of HTTP01 or DNS01 must be provided.", "type": "object", "properties": {"dns01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the DNS01 challenge flow.", "type": "object", "properties": {"acmeDNS": {"description": "Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\nDNS01 challenge records.", "type": "object", "required": ["accountSecretRef", "host"], "properties": {"accountSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "host": {"type": "string"}}}, "akamai": {"description": "Use the Akamai DNS zone management API to manage DNS01 challenge records.", "type": "object", "required": ["accessTokenSecretRef", "clientSecretSecretRef", "clientTokenSecretRef", "serviceConsumerDomain"], "properties": {"accessTokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "clientSecretSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "clientTokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "serviceConsumerDomain": {"type": "string"}}}, "azureDNS": {"description": "Use the Microsoft Azure DNS API to manage DNS01 challenge records.", "type": "object", "required": ["resourceGroupName", "subscriptionID"], "properties": {"clientID": {"description": "Auth: Azure Service Principal:\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientSecret and TenantID must also be set.", "type": "string"}, "clientSecretSecretRef": {"description": "Auth: Azure Service Principal:\nA reference to a Secret containing the password associated with the Service Principal.\nIf set, ClientID and TenantID must also be set.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "environment": {"description": "name of the Azure environment (default AzurePublicCloud)", "type": "string", "enum": ["AzurePublicCloud", "AzureChinaCloud", "AzureGermanCloud", "AzureUSGovernmentCloud"]}, "hostedZoneName": {"description": "name of the DNS zone that should be used", "type": "string"}, "managedIdentity": {"description": "Auth: Azure Workload Identity or Azure Managed Service Identity:\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\nIf set, ClientID, ClientSecret and TenantID must not be set.", "type": "object", "properties": {"clientID": {"description": "client ID of the managed identity, can not be used at the same time as resourceID", "type": "string"}, "resourceID": {"description": "resource ID of the managed identity, can not be used at the same time as clientID\nCannot be used for Azure Managed Service Identity", "type": "string"}}}, "resourceGroupName": {"description": "resource group the DNS zone is located in", "type": "string"}, "subscriptionID": {"description": "ID of the Azure subscription", "type": "string"}, "tenantID": {"description": "Auth: Azure Service Principal:\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\nIf set, ClientID and ClientSecret must also be set.", "type": "string"}}}, "cloudDNS": {"description": "Use the Google Cloud DNS API to manage DNS01 challenge records.", "type": "object", "required": ["project"], "properties": {"hostedZoneName": {"description": "HostedZoneName is an optional field that tells cert-manager in which\nCloud DNS zone the challenge record has to be created.\nIf left empty cert-manager will automatically choose a zone.", "type": "string"}, "project": {"type": "string"}, "serviceAccountSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "cloudflare": {"description": "Use the Cloudflare API to manage DNS01 challenge records.", "type": "object", "properties": {"apiKeySecretRef": {"description": "API key to use to authenticate with Cloudflare.\nNote: using an API token to authenticate is now the recommended method\nas it allows greater control of permissions.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "apiTokenSecretRef": {"description": "API token used to authenticate with Cloudflare.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "email": {"description": "Email of the account, only required when using API key based authentication.", "type": "string"}}}, "cnameStrategy": {"description": "CNAMEStrategy configures how the DNS01 provider should handle CNAME\nrecords when found in DNS zones.", "type": "string", "enum": ["None", "Follow"]}, "digitalocean": {"description": "Use the DigitalOcean DNS API to manage DNS01 challenge records.", "type": "object", "required": ["tokenSecretRef"], "properties": {"tokenSecretRef": {"description": "A reference to a specific 'key' within a Secret resource.\nIn some instances, `key` is a required field.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "rfc2136": {"description": "Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/)\nto manage DNS01 challenge records.", "type": "object", "required": ["nameserver"], "properties": {"nameserver": {"description": "The IP address or hostname of an authoritative DNS server supporting\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\nThis field is required.", "type": "string"}, "tsigAlgorithm": {"description": "The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\nSupported values are (case-insensitive): ``HMACMD5`` (default),\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.", "type": "string"}, "tsigKeyName": {"description": "The TSIG Key name configured in the DNS.\nIf ``tsigSecretSecretRef`` is defined, this field is required.", "type": "string"}, "tsigSecretSecretRef": {"description": "The name of the secret containing the TSIG value.\nIf ``tsigKeyName`` is defined, this field is required.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "route53": {"description": "Use the AWS Route53 API to manage DNS01 challenge records.", "type": "object", "required": ["region"], "properties": {"accessKeyID": {"description": "The AccessKeyID is used for authentication.\nCannot be set when SecretAccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "string"}, "accessKeyIDSecretRef": {"description": "The SecretAccessKey is used for authentication. If set, pull the AWS\naccess key ID from a key within a Kubernetes Secret.\nCannot be set when AccessKeyID is set.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "hostedZoneID": {"description": "If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.", "type": "string"}, "region": {"description": "Always set the region when using AccessKeyID and SecretAccessKey", "type": "string"}, "role": {"description": "Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata", "type": "string"}, "secretAccessKeySecretRef": {"description": "The SecretAccessKey is used for authentication.\nIf neither the Access Key nor Key ID are set, we fall-back to using env\nvars, shared credentials file or AWS Instance metadata,\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}}}, "webhook": {"description": "Configure an external webhook based DNS01 challenge solver to manage\nDNS01 challenge records.", "type": "object", "required": ["groupName", "solverName"], "properties": {"config": {"description": "Additional configuration that should be passed to the webhook apiserver\nwhen challenges are processed.\nThis can contain arbitrary JSON data.\nSecret values should not be specified in this stanza.\nIf secret values are needed (e.g. credentials for a DNS service), you\nshould use a SecretKeySelector to reference a Secret resource.\nFor details on the schema of this field, consult the webhook provider\nimplementation's documentation.", "x-kubernetes-preserve-unknown-fields": true}, "groupName": {"description": "The API group name that should be used when POSTing ChallengePayload\nresources to the webhook apiserver.\nThis should be the same as the GroupName specified in the webhook\nprovider implementation.", "type": "string"}, "solverName": {"description": "The name of the solver to use, as defined in the webhook provider\nimplementation.\nThis will typically be the name of the provider, e.g. 'cloudflare'.", "type": "string"}}}}}, "http01": {"description": "Configures cert-manager to attempt to complete authorizations by\nperforming the HTTP01 challenge flow.\nIt is not possible to obtain certificates for wildcard domain names\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.", "type": "object", "properties": {"gatewayHTTPRoute": {"description": "The Gateway API is a sig-network community API that models service networking\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\nThis solver is experimental, and fields / behaviour may change in the future.", "type": "object", "properties": {"labels": {"description": "Custom labels that will be applied to HTTPRoutes created by cert-manager\nwhile solving HTTP-01 challenges.", "type": "object", "additionalProperties": {"type": "string"}}, "parentRefs": {"description": "When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\ncert-manager needs to know which parentRefs should be used when creating\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways", "type": "array", "items": {"description": "ParentReference identifies an API object (usually a Gateway) that can be considered\na parent of this resource (usually a route). There are two kinds of parent resources\nwith \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nThis API may be extended in the future to support additional kinds of parent\nresources.\n\n\nThe API object must be valid in the cluster; the Group and Kind must\nbe registered in the cluster for this reference to be valid.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group is the group of the referent.\nWhen unspecified, \"gateway.networking.k8s.io\" is inferred.\nTo set the core API group (such as for a \"Service\" kind referent),\nGroup must be explicitly set to \"\" (empty string).\n\n\nSupport: Core", "type": "string", "default": "gateway.networking.k8s.io", "maxLength": 253, "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}, "kind": {"description": "Kind is kind of the referent.\n\n\nThere are two kinds of parent resources with \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nSupport for other resources is Implementation-Specific.", "type": "string", "default": "Gateway", "maxLength": 63, "minLength": 1, "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"}, "name": {"description": "Name is the name of the referent.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1}, "namespace": {"description": "Namespace is the namespace of the referent. When unspecified, this refers\nto the local namespace of the Route.\n\n\nNote that there are specific rules for ParentRefs which cross namespace\nboundaries. Cross-namespace references are only valid if they are explicitly\nallowed by something in the namespace they are referring to. For example:\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\ngeneric way to enable any other kind of cross-namespace reference.\n\n\n<gateway:experimental:description>\nParentRefs from a Route to a Service in the same namespace are \"producer\"\nroutes, which apply default routing rules to inbound connections from\nany namespace to the Service.\n\n\nParentRefs from a Route to a Service in a different namespace are\n\"consumer\" routes, and these routing rules are only applied to outbound\nconnections originating from the same namespace as the Route, for which\nthe intended destination of the connections are a Service targeted as a\nParentRef of the Route.\n</gateway:experimental:description>\n\n\nSupport: Core", "type": "string", "maxLength": 63, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"}, "port": {"description": "Port is the network port this Route targets. It can be interpreted\ndifferently based on the type of parent resource.\n\n\nWhen the parent resource is a Gateway, this targets all listeners\nlistening on the specified port that also support this kind of Route(and\nselect this Route). It's not recommended to set `Port` unless the\nnetworking behaviors specified in a Route must apply to a specific port\nas opposed to a listener(s) whose port(s) may be changed. When both Port\nand SectionName are specified, the name and port of the selected listener\nmust match both specified values.\n\n\n<gateway:experimental:description>\nWhen the parent resource is a Service, this targets a specific port in the\nService spec. When both Port (experimental) and SectionName are specified,\nthe name and port of the selected port must match both specified values.\n</gateway:experimental:description>\n\n\nImplementations MAY choose to support other parent resources.\nImplementations supporting other types of parent resources MUST clearly\ndocument how/if Port is interpreted.\n\n\nFor the purpose of status, an attachment is considered successful as\nlong as the parent resource accepts it partially. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\nfrom the referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route,\nthe Route MUST be considered detached from the Gateway.\n\n\nSupport: Extended\n\n\n<gateway:experimental>", "type": "integer", "format": "int32", "maximum": 65535, "minimum": 1}, "sectionName": {"description": "SectionName is the name of a section within the target resource. In the\nfollowing resources, SectionName is interpreted as the following:\n\n\n* Gateway: Listener Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n* Service: Port Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values. Note that attaching Routes to Services as Parents\nis part of experimental Mesh support and is not supported for any other\npurpose.\n\n\nImplementations MAY choose to support attaching Routes to other resources.\nIf that is the case, they MUST clearly document how SectionName is\ninterpreted.\n\n\nWhen unspecified (empty string), this will reference the entire resource.\nFor the purpose of status, an attachment is considered successful if at\nleast one section in the parent resource accepts it. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\nthe referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route, the\nRoute MUST be considered detached from the Gateway.\n\n\nSupport: Core", "type": "string", "maxLength": 253, "minLength": 1, "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"}}}}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}, "ingress": {"description": "The ingress based HTTP01 challenge solver will solve challenges by\ncreating or modifying Ingress resources in order to route requests for\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\nprovisioned by cert-manager for each Challenge to be completed.", "type": "object", "properties": {"class": {"description": "This field configures the annotation `kubernetes.io/ingress.class` when\ncreating Ingress resources to solve ACME challenges that use this\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "ingressClassName": {"description": "This field configures the field `ingressClassName` on the created Ingress\nresources used to solve ACME challenges that use this challenge solver.\nThis is the recommended way of configuring the ingress class. Only one of\n`class`, `name` or `ingressClassName` may be specified.", "type": "string"}, "ingressTemplate": {"description": "Optional ingress template used to configure the ACME challenge solver\ningress used for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"description": "ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver ingress.", "type": "object", "additionalProperties": {"type": "string"}}}}}}, "name": {"description": "The name of the ingress resource that should have ACME challenge solving\nroutes inserted into it in order to solve HTTP01 challenges.\nThis is typically used in conjunction with ingress controllers like\ningress-gce, which maintains a 1:1 mapping between external IPs and\ningress resources. Only one of `class`, `name` or `ingressClassName` may\nbe specified.", "type": "string"}, "podTemplate": {"description": "Optional pod template used to configure the ACME challenge solver pods\nused for HTTP01 challenges.", "type": "object", "properties": {"metadata": {"description": "ObjectMeta overrides for the pod used to solve HTTP01 challenges.\nOnly the 'labels' and 'annotations' fields may be set.\nIf labels or annotations overlap with in-built values, the values here\nwill override the in-built values.", "type": "object", "properties": {"annotations": {"description": "Annotations that should be added to the create ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}, "labels": {"description": "Labels that should be added to the created ACME HTTP01 solver pods.", "type": "object", "additionalProperties": {"type": "string"}}}}, "spec": {"description": "PodSpec defines overrides for the HTTP01 challenge solver pod.\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\nAll other fields will be ignored.", "type": "object", "properties": {"affinity": {"description": "If specified, the pod's scheduling constraints", "type": "object", "properties": {"nodeAffinity": {"description": "Describes node affinity scheduling rules for the pod.", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", "type": "object", "required": ["preference", "weight"], "properties": {"preference": {"description": "A node selector term, associated with the corresponding weight.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}, "weight": {"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.", "type": "object", "required": ["nodeSelectorTerms"], "properties": {"nodeSelectorTerms": {"description": "Required. A list of node selector terms. The terms are ORed.", "type": "array", "items": {"description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", "type": "object", "properties": {"matchExpressions": {"description": "A list of node selector requirements by node's labels.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchFields": {"description": "A list of node selector requirements by node's fields.", "type": "array", "items": {"description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "The label key that the selector applies to.", "type": "string"}, "operator": {"description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.", "type": "string"}, "values": {"description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.", "type": "array", "items": {"type": "string"}}}}}}, "x-kubernetes-map-type": "atomic"}}}, "x-kubernetes-map-type": "atomic"}}}, "podAffinity": {"description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}}}, "podAntiAffinity": {"description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).", "type": "object", "properties": {"preferredDuringSchedulingIgnoredDuringExecution": {"description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.", "type": "array", "items": {"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", "type": "object", "required": ["podAffinityTerm", "weight"], "properties": {"podAffinityTerm": {"description": "Required. A pod affinity term, associated with the corresponding weight.", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}, "weight": {"description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.", "type": "integer", "format": "int32"}}}}, "requiredDuringSchedulingIgnoredDuringExecution": {"description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.", "type": "array", "items": {"description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running", "type": "object", "required": ["topologyKey"], "properties": {"labelSelector": {"description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "matchLabelKeys": {"description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "mismatchLabelKeys": {"description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "namespaceSelector": {"description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.", "type": "object", "properties": {"matchExpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "type": "array", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.", "type": "object", "required": ["key", "operator"], "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.", "type": "array", "items": {"type": "string"}}}}}, "matchLabels": {"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object", "additionalProperties": {"type": "string"}}}, "x-kubernetes-map-type": "atomic"}, "namespaces": {"description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", "type": "array", "items": {"type": "string"}}, "topologyKey": {"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.", "type": "string"}}}}}}}}, "imagePullSecrets": {"description": "If specified, the pod's imagePullSecrets", "type": "array", "items": {"description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.", "type": "object", "properties": {"name": {"description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?", "type": "string"}}, "x-kubernetes-map-type": "atomic"}}, "nodeSelector": {"description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/", "type": "object", "additionalProperties": {"type": "string"}}, "priorityClassName": {"description": "If specified, the pod's priorityClassName.", "type": "string"}, "serviceAccountName": {"description": "If specified, the pod's service account", "type": "string"}, "tolerations": {"description": "If specified, the pod's tolerations.", "type": "array", "items": {"description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.", "type": "object", "properties": {"effect": {"description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.", "type": "string"}, "key": {"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.", "type": "string"}, "operator": {"description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.", "type": "string"}, "tolerationSeconds": {"description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.", "type": "integer", "format": "int64"}, "value": {"description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.", "type": "string"}}}}}}}}, "serviceType": {"description": "Optional service type for Kubernetes solver service. Supported values\nare NodePort or ClusterIP. If unset, defaults to NodePort.", "type": "string"}}}}}, "selector": {"description": "Selector selects a set of DNSNames on the Certificate resource that\nshould be solved using this challenge solver.\nIf not specified, the solver will be treated as the 'default' solver\nwith the lowest priority, i.e. if any other solver has a more specific\nmatch, it will be used instead.", "type": "object", "properties": {"dnsNames": {"description": "List of DNSNames that this solver will be used to solve.\nIf specified and a match is found, a dnsNames selector will take\nprecedence over a dnsZones selector.\nIf multiple solvers match with the same dnsNames value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "dnsZones": {"description": "List of DNSZones that this solver will be used to solve.\nThe most specific DNS zone match specified here will take precedence\nover other DNS zone matches, so a solver specifying sys.example.com\nwill be selected over one specifying example.com for the domain\nwww.sys.example.com.\nIf multiple solvers match with the same dnsZones value, the solver\nwith the most matching labels in matchLabels will be selected.\nIf neither has more matches, the solver defined earlier in the list\nwill be selected.", "type": "array", "items": {"type": "string"}}, "matchLabels": {"description": "A label selector that is used to refine the set of certificate's that\nthis challenge solver will apply to.", "type": "object", "additionalProperties": {"type": "string"}}}}}}}, "io.cert-manager.v1.IssuerSpecCaCrldistributionpoints": {"description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set, certificates will be issued without distribution points set.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.IssuerSpecCaIssuingcertificateurls": {"description": "IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\nAs an example, such a URL might be \"http://ca.domain.com/ca.crt\".", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.IssuerSpecCaOcspservers": {"description": "The OCSP server list is an X.509 v3 extension that defines a list of\nURLs of OCSP responders. The OCSP responders can be queried for the\nrevocation status of an issued certificate. If not set, the\ncertificate will be issued with no OCSP servers set. For example, an\nOCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.IssuerSpecSelfsignedCrldistributionpoints": {"description": "The CRL distribution points is an X.509 v3 certificate extension which identifies\nthe location of the CRL from which the revocation of this certificate can be checked.\nIf not set certificate will be issued without CDP. Values are strings.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.IssuerSpecVaultAuth": {"description": "Auth configures how cert-manager authenticates with the Vault server.", "type": "object", "properties": {"appRole": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthApprole", "description": "AppRole authenticates with Vault using the App Role auth mechanism,\nwith the role and secret stored in a Kubernetes Secret resource."}, "kubernetes": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthKubernetes", "description": "Kubernetes authenticates with Vault by passing the ServiceAccount\ntoken stored in the named Secret resource to the Vault server."}, "tokenSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthTokensecretref", "description": "TokenSecretRef authenticates with Vault by presenting a token."}}}, "io.cert-manager.v1.IssuerSpecVaultCabundlesecretref": {"description": "Reference to a Secret containing a bundle of PEM-encoded CAs to use when\nverifying the certificate chain presented by Vault when using HTTPS.\nMutually exclusive with CABundle.\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\nthe cert-manager controller container is used to validate the TLS connection.\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultClientcertsecretref": {"description": "Reference to a Secret containing a PEM-encoded Client Certificate to use when the\nVault server requires mTLS.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultClientkeysecretref": {"description": "Reference to a Secret containing a PEM-encoded Client Private Key to use when the\nVault server requires mTLS.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVenafiCloud": {"description": "Cloud specifies the Venafi cloud configuration settings.\nOnly one of TPP or Cloud may be specified.", "type": "object", "required": ["apiTokenSecretRef"], "properties": {"apiTokenSecretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVenafiCloudApitokensecretref", "description": "APITokenSecretRef is a secret key selector for the Venafi Cloud API token."}, "url": {"description": "URL is the base URL for Venafi Cloud.\nDefaults to \"https://api.venafi.cloud/v1\".", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVenafiTpp": {"description": "TPP specifies Trust Protection Platform configuration settings.\nOnly one of TPP or Cloud may be specified.", "type": "object", "required": ["credentialsRef", "url"], "properties": {"caBundle": {"description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate\nchain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.\nIf undefined, the certificate bundle in the cert-manager controller container\nis used to validate the chain.", "type": "string", "format": "byte"}, "credentialsRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVenafiTppCredentialsref", "description": "CredentialsRef is a reference to a Secret containing the username and\npassword for the TPP server.\nThe secret must contain two keys, 'username' and 'password'."}, "url": {"description": "URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,\nfor example: \"https://tpp.example.com/vedsdk\".", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecAcmeExternalaccountbindingKeysecretref": {"description": "keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\nSecret which holds the symmetric MAC key of the External Account Binding.\nThe `key` is the index string that is paired with the key data in the\nSecret and should not be confused with the key data itself, or indeed with\nthe External Account Binding keyID above.\nThe secret key stored in the Secret **must** be un-padded, base64 URL\nencoded data.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultAuthApprole": {"description": "AppRole authenticates with Vault using the App Role auth mechanism,\nwith the role and secret stored in a Kubernetes Secret resource.", "type": "object", "required": ["path", "roleId", "secretRef"], "properties": {"path": {"description": "Path where the App Role authentication backend is mounted in Vault, e.g:\n\"approle\"", "type": "string"}, "roleId": {"description": "RoleID configured in the App Role authentication backend when setting\nup the authentication backend in Vault.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthApproleSecretref", "description": "Reference to a key in a Secret that contains the App Role secret used\nto authenticate with Vault.\nThe `key` field must be specified and denotes which entry within the Secret\nresource is used as the app role secret."}}}, "io.cert-manager.v1.IssuerSpecVaultAuthKubernetes": {"description": "Kubernetes authenticates with Vault by passing the ServiceAccount\ntoken stored in the named Secret resource to the Vault server.", "type": "object", "required": ["role"], "properties": {"mountPath": {"description": "The Vault mountPath here is the mount path to use when authenticating with\nVault. For example, setting a value to `/v1/auth/foo`, will use the path\n`/v1/auth/foo/login` to authenticate with Vault. If unspecified, the\ndefault value \"/v1/auth/kubernetes\" will be used.", "type": "string"}, "role": {"description": "A required field containing the Vault Role to assume. A Role binds a\nKubernetes ServiceAccount with a set of Vault policies.", "type": "string"}, "secretRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthKubernetesSecretref", "description": "The required Secret field containing a Kubernetes ServiceAccount JWT used\nfor authenticating with Vault. Use of 'ambient credentials' is not\nsupported."}, "serviceAccountRef": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthKubernetesServiceaccountref", "description": "A reference to a service account that will be used to request a bound\ntoken (also known as \"projected token\"). Compared to using \"secretRef\",\nusing this field means that you don't rely on statically bound tokens. To\nuse this field, you must configure an RBAC rule to let cert-manager\nrequest a token."}}}, "io.cert-manager.v1.IssuerSpecVaultAuthTokensecretref": {"description": "TokenSecretRef authenticates with Vault by presenting a token.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVenafiCloudApitokensecretref": {"description": "APITokenSecretRef is a secret key selector for the Venafi Cloud API token.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVenafiTppCredentialsref": {"description": "CredentialsRef is a reference to a Secret containing the username and\npassword for the TPP server.\nThe secret must contain two keys, 'username' and 'password'.", "type": "object", "required": ["name"], "properties": {"name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultAuthApproleSecretref": {"description": "Reference to a key in a Secret that contains the App Role secret used\nto authenticate with Vault.\nThe `key` field must be specified and denotes which entry within the Secret\nresource is used as the app role secret.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultAuthKubernetesSecretref": {"description": "The required Secret field containing a Kubernetes ServiceAccount JWT used\nfor authenticating with Vault. Use of 'ambient credentials' is not\nsupported.", "type": "object", "required": ["name"], "properties": {"key": {"description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.", "type": "string"}, "name": {"description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultAuthKubernetesServiceaccountref": {"description": "A reference to a service account that will be used to request a bound\ntoken (also known as \"projected token\"). Compared to using \"secretRef\",\nusing this field means that you don't rely on statically bound tokens. To\nuse this field, you must configure an RBAC rule to let cert-manager\nrequest a token.", "type": "object", "required": ["name"], "properties": {"audiences": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.IssuerSpecVaultAuthKubernetesServiceaccountrefAudiences"}, "description": "TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\nconsisting of the issuer's namespace and name is always included.", "manifests_processed": true}, "name": {"description": "Name of the ServiceAccount used to request a token.", "type": "string"}}}, "io.cert-manager.v1.IssuerSpecVaultAuthKubernetesServiceaccountrefAudiences": {"description": "TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\nconsisting of the issuer's namespace and name is always included.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.v1.CertificateRequest": {"description": "A CertificateRequest is used to request a signed certificate from one of the\nconfigured issuers.\n\n\nAll fields within the CertificateRequest's `spec` are immutable after creation.\nA CertificateRequest will either succeed or fail, as denoted by its `Ready` status\ncondition and its `status.failureTime` field.\n\n\nA CertificateRequest is a one-shot resource, meaning it represents a single\npoint in time request for a certificate and cannot be re-used.", "type": "object", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestSpec", "description": "Specification of the desired state of the CertificateRequest resource.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"}, "status": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestStatus", "description": "Status of the CertificateRequest.\nThis is set and managed automatically.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager", "version": "v1", "kind": "CertificateRequest"}]}, "io.cert-manager.v1.CertificateRequestSpec": {"description": "Specification of the desired state of the CertificateRequest resource.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", "type": "object", "required": ["issuerRef", "request"], "properties": {"duration": {"description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\nissuer may choose to ignore the requested duration, just like any other\nrequested attribute.", "type": "string"}, "extra": {"description": "Extra contains extra attributes of the user that created the CertificateRequest.\nPopulated by the cert-manager webhook on creation and immutable.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "string"}}}, "groups": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestSpecGroups"}, "description": "Groups contains group membership of the user that created the CertificateRequest.\nPopulated by the cert-manager webhook on creation and immutable.", "manifests_processed": true}, "isCA": {"description": "Requested basic constraints isCA value. Note that the issuer may choose\nto ignore the requested isCA value, just like any other requested attribute.\n\n\nNOTE: If the CSR in the `Request` field has a BasicConstraints extension,\nit must have the same isCA value as specified here.\n\n\nIf true, this will automatically add the `cert sign` usage to the list\nof requested `usages`.", "type": "boolean"}, "issuerRef": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestSpecIssuerref", "description": "Reference to the issuer responsible for issuing the certificate.\nIf the issuer is namespace-scoped, it must be in the same namespace\nas the Certificate. If the issuer is cluster-scoped, it can be used\nfrom any namespace.\n\n\nThe `name` field of the reference must always be specified."}, "request": {"description": "The PEM-encoded X.509 certificate signing request to be submitted to the\nissuer for signing.\n\n\nIf the CSR has a BasicConstraints extension, its isCA attribute must\nmatch the `isCA` value of this CertificateRequest.\nIf the CSR has a KeyUsage extension, its key usages must match the\nkey usages in the `usages` field of this CertificateRequest.\nIf the CSR has a ExtKeyUsage extension, its extended key usages\nmust match the extended key usages in the `usages` field of this\nCertificateRequest.", "type": "string", "format": "byte"}, "uid": {"description": "UID contains the uid of the user that created the CertificateRequest.\nPopulated by the cert-manager webhook on creation and immutable.", "type": "string"}, "usages": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestSpecUsages"}, "description": "Requested key usages and extended key usages.\n\n\nNOTE: If the CSR in the `Request` field has uses the KeyUsage or\nExtKeyUsage extension, these extensions must have the same values\nas specified here without any additional values.\n\n\nIf unset, defaults to `digital signature` and `key encipherment`.", "manifests_processed": true}, "username": {"description": "Username contains the name of the user that created the CertificateRequest.\nPopulated by the cert-manager webhook on creation and immutable.", "type": "string"}}}, "io.cert-manager.v1.CertificateRequestStatus": {"description": "Status of the CertificateRequest.\nThis is set and managed automatically.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", "type": "object", "properties": {"ca": {"description": "The PEM encoded X.509 certificate of the signer, also known as the CA\n(Certificate Authority).\nThis is set on a best-effort basis by different issuers.\nIf not set, the CA is assumed to be unknown/not available.", "type": "string", "format": "byte"}, "certificate": {"description": "The PEM encoded X.509 certificate resulting from the certificate\nsigning request.\nIf not set, the CertificateRequest has either not been completed or has\nfailed. More information on failure can be found by checking the\n`conditions` field.", "type": "string", "format": "byte"}, "conditions": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.v1.CertificateRequestStatusConditions"}, "description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.", "manifests_processed": true}, "failureTime": {"description": "FailureTime stores the time that this CertificateRequest failed. This is\nused to influence garbage collection and back-off.", "type": "string", "format": "date-time"}}}, "io.cert-manager.v1.CertificateRequestSpecGroups": {"description": "Groups contains group membership of the user that created the CertificateRequest.\nPopulated by the cert-manager webhook on creation and immutable.", "type": "array", "items": {"type": "string"}, "x-kubernetes-list-type": "atomic"}, "io.cert-manager.v1.CertificateRequestSpecIssuerref": {"description": "Reference to the issuer responsible for issuing the certificate.\nIf the issuer is namespace-scoped, it must be in the same namespace\nas the Certificate. If the issuer is cluster-scoped, it can be used\nfrom any namespace.\n\n\nThe `name` field of the reference must always be specified.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group of the resource being referred to.", "type": "string"}, "kind": {"description": "Kind of the resource being referred to.", "type": "string"}, "name": {"description": "Name of the resource being referred to.", "type": "string"}}}, "io.cert-manager.v1.CertificateRequestSpecUsages": {"description": "Requested key usages and extended key usages.\n\n\nNOTE: If the CSR in the `Request` field has uses the KeyUsage or\nExtKeyUsage extension, these extensions must have the same values\nas specified here without any additional values.\n\n\nIf unset, defaults to `digital signature` and `key encipherment`.", "type": "array", "items": {"description": "KeyUsage specifies valid usage contexts for keys.\nSee:\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\n\n\nValid KeyUsage values are as follows:\n\"signing\",\n\"digital signature\",\n\"content commitment\",\n\"key encipherment\",\n\"key agreement\",\n\"data encipherment\",\n\"cert sign\",\n\"crl sign\",\n\"encipher only\",\n\"decipher only\",\n\"any\",\n\"server auth\",\n\"client auth\",\n\"code signing\",\n\"email protection\",\n\"s/mime\",\n\"ipsec end system\",\n\"ipsec tunnel\",\n\"ipsec user\",\n\"timestamping\",\n\"ocsp signing\",\n\"microsoft sgc\",\n\"netscape sgc\"", "type": "string", "enum": ["signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"]}}, "io.cert-manager.v1.CertificateRequestStatusConditions": {"description": "List of status conditions to indicate the status of a CertificateRequest.\nKnown condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.", "type": "array", "items": {"description": "CertificateRequestCondition contains condition information for a CertificateRequest.", "type": "object", "required": ["status", "type"], "properties": {"lastTransitionTime": {"description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.", "type": "string", "format": "date-time"}, "message": {"description": "Message is a human readable description of the details of the last\ntransition, complementing reason.", "type": "string"}, "reason": {"description": "Reason is a brief machine readable explanation for the condition's last\ntransition.", "type": "string"}, "status": {"description": "Status of the condition, one of (`True`, `False`, `Unknown`).", "type": "string", "enum": ["True", "False", "Unknown"]}, "type": {"description": "Type of the condition, known values are (`Ready`, `InvalidRequest`,\n`Approved`, `Denied`).", "type": "string"}}}, "x-kubernetes-list-map-keys": ["type"], "x-kubernetes-list-type": "map"}, "io.cert-manager.acme.v1.Order": {"description": "Order is a type to represent an Order with an ACME server", "type": "object", "required": ["metadata", "spec"], "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderSpec", "description": ""}, "status": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderStatus", "description": ""}}, "x-kubernetes-group-version-kind": [{"group": "io.cert-manager.acme", "version": "v1", "kind": "Order"}]}, "io.cert-manager.acme.v1.OrderSpec": {"type": "object", "required": ["issuerRef", "request"], "properties": {"commonName": {"description": "CommonName is the common name as specified on the DER encoded CSR.\nIf specified, this value must also be present in `dnsNames` or `ipAddresses`.\nThis field must match the corresponding field on the DER encoded CSR.", "type": "string"}, "dnsNames": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderSpecDnsnames"}, "description": "DNSNames is a list of DNS names that should be included as part of the Order\nvalidation process.\nThis field must match the corresponding field on the DER encoded CSR.", "manifests_processed": true}, "duration": {"description": "Duration is the duration for the not after date for the requested certificate.\nthis is set on order creation as pe the ACME spec.", "type": "string"}, "ipAddresses": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderSpecIpaddresses"}, "description": "IPAddresses is a list of IP addresses that should be included as part of the Order\nvalidation process.\nThis field must match the corresponding field on the DER encoded CSR.", "manifests_processed": true}, "issuerRef": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderSpecIssuerref", "description": "IssuerRef references a properly configured ACME-type Issuer which should\nbe used to create this Order.\nIf the Issuer does not exist, processing will be retried.\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\nOrder will be marked as failed."}, "request": {"description": "Certificate signing request bytes in DER encoding.\nThis will be used when finalizing the order.\nThis field must be set on the order.", "type": "string", "format": "byte"}}, "description": ""}, "io.cert-manager.acme.v1.OrderStatus": {"type": "object", "properties": {"authorizations": {"type": "array", "items": {"$ref": "#/definitions/io.cert-manager.acme.v1.OrderStatusAuthorizations"}, "description": "Authorizations contains data returned from the ACME server on what\nauthorizations must be completed in order to validate the DNS names\nspecified on the Order.", "manifests_processed": true}, "certificate": {"description": "Certificate is a copy of the PEM encoded certificate for this Order.\nThis field will be populated after the order has been successfully\nfinalized with the ACME server, and the order has transitioned to the\n'valid' state.", "type": "string", "format": "byte"}, "failureTime": {"description": "FailureTime stores the time that this order failed.\nThis is used to influence garbage collection and back-off.", "type": "string", "format": "date-time"}, "finalizeURL": {"description": "FinalizeURL of the Order.\nThis is used to obtain certificates for this order once it has been completed.", "type": "string"}, "reason": {"description": "Reason optionally provides more information about a why the order is in\nthe current state.", "type": "string"}, "state": {"description": "State contains the current state of this Order resource.\nStates 'success' and 'expired' are 'final'", "type": "string", "enum": ["valid", "ready", "pending", "processing", "invalid", "expired", "errored"]}, "url": {"description": "URL of the Order.\nThis will initially be empty when the resource is first created.\nThe Order controller will populate this field when the Order is first processed.\nThis field will be immutable after it is initially set.", "type": "string"}}, "description": ""}, "io.cert-manager.acme.v1.OrderSpecDnsnames": {"description": "DNSNames is a list of DNS names that should be included as part of the Order\nvalidation process.\nThis field must match the corresponding field on the DER encoded CSR.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.acme.v1.OrderSpecIpaddresses": {"description": "IPAddresses is a list of IP addresses that should be included as part of the Order\nvalidation process.\nThis field must match the corresponding field on the DER encoded CSR.", "type": "array", "items": {"type": "string"}}, "io.cert-manager.acme.v1.OrderSpecIssuerref": {"description": "IssuerRef references a properly configured ACME-type Issuer which should\nbe used to create this Order.\nIf the Issuer does not exist, processing will be retried.\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\nOrder will be marked as failed.", "type": "object", "required": ["name"], "properties": {"group": {"description": "Group of the resource being referred to.", "type": "string"}, "kind": {"description": "Kind of the resource being referred to.", "type": "string"}, "name": {"description": "Name of the resource being referred to.", "type": "string"}}}, "io.cert-manager.acme.v1.OrderStatusAuthorizations": {"description": "Authorizations contains data returned from the ACME server on what\nauthorizations must be completed in order to validate the DNS names\nspecified on the Order.", "type": "array", "items": {"description": "ACMEAuthorization contains data returned from the ACME server on an\nauthorization that must be completed in order validate a DNS name on an ACME\nOrder resource.", "type": "object", "required": ["url"], "properties": {"challenges": {"description": "Challenges specifies the challenge types offered by the ACME server.\nOne of these challenge types will be selected when validating the DNS\nname and an appropriate Challenge resource will be created to perform\nthe ACME challenge process.", "type": "array", "items": {"description": "Challenge specifies a challenge offered by the ACME server for an Order.\nAn appropriate Challenge resource can be created to perform the ACME\nchallenge process.", "type": "object", "required": ["token", "type", "url"], "properties": {"token": {"description": "Token is the token that must be presented for this challenge.\nThis is used to compute the 'key' that must also be presented.", "type": "string"}, "type": {"description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',\n'tls-sni-01', etc.\nThis is the raw value retrieved from the ACME server.\nOnly 'http-01' and 'dns-01' are supported by cert-manager, other values\nwill be ignored.", "type": "string"}, "url": {"description": "URL is the URL of this challenge. It can be used to retrieve additional\nmetadata about the Challenge from the ACME server.", "type": "string"}}}}, "identifier": {"description": "Identifier is the DNS name to be validated as part of this authorization", "type": "string"}, "initialState": {"description": "InitialState is the initial state of the ACME authorization when first\nfetched from the ACME server.\nIf an Authorization is already 'valid', the Order controller will not\ncreate a Challenge resource for the authorization. This will occur when\nworking with an ACME server that enables 'authz reuse' (such as Let's\nEncrypt's production endpoint).\nIf not set and 'identifier' is set, the state is assumed to be pending\nand a Challenge will be created.", "type": "string", "enum": ["valid", "ready", "pending", "processing", "invalid", "expired", "errored"]}, "url": {"description": "URL is the URL of the Authorization that must be completed", "type": "string"}, "wildcard": {"description": "Wildcard will be true if this authorization is for a wildcard DNS name.\nIf this is true, the identifier will be the *non-wildcard* version of\nthe DNS name.\nFor example, if '*.example.com' is the DNS name being validated, this\nfield will be 'true' and the 'identifier' field will be 'example.com'.", "type": "boolean"}}}}}}