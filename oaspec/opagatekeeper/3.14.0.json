{"definitions": {"sh.gatekeeper.mutations.v1.ModifySet": {"description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetMetadata", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpec", "description": "ModifySetSpec defines the desired state of ModifySet."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetStatus", "description": "ModifySetStatus defines the observed state of ModifySet."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1", "kind": "ModifySet"}]}, "sh.gatekeeper.mutations.v1alpha1.ModifySet": {"description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpec", "description": "ModifySetSpec defines the desired state of ModifySet."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetStatus", "description": "ModifySetStatus defines the observed state of ModifySet."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1alpha1", "kind": "ModifySet"}]}, "sh.gatekeeper.mutations.v1beta1.ModifySet": {"description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpec", "description": "ModifySetSpec defines the desired state of ModifySet."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetStatus", "description": "ModifySetStatus defines the observed state of ModifySet."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1beta1", "kind": "ModifySet"}]}, "sh.gatekeeper.mutations.v1.ModifySetMetadata": {"properties": {"name": {"maxLength": 63, "type": "string"}}, "type": "object", "description": ""}, "sh.gatekeeper.mutations.v1.ModifySetSpec": {"description": "ModifySetSpec defines the desired state of ModifySet.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetStatus": {"description": "ModifySetStatus defines the observed state of ModifySet.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpec": {"description": "ModifySetSpec defines the desired state of ModifySet.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetStatus": {"description": "ModifySetStatus defines the observed state of ModifySet.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpec": {"description": "ModifySetSpec defines the desired state of ModifySet.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetStatus": {"description": "ModifySetStatus defines the observed state of ModifySet.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"operation": {"default": "merge", "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"", "enum": ["merge", "prune"], "type": "string"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecParametersPathtests"}, "description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "manifests_processed": true}, "values": {"description": "Values describes the values provided to the operation as `values.fromList`.", "type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"operation": {"default": "merge", "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"", "enum": ["merge", "prune"], "type": "string"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecParametersPathtests"}, "description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "manifests_processed": true}, "values": {"description": "Values describes the values provided to the operation as `values.fromList`.", "type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"operation": {"default": "merge", "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"", "enum": ["merge", "prune"], "type": "string"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecParametersPathtests"}, "description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "manifests_processed": true}, "values": {"description": "Values describes the values provided to the operation as `values.fromList`.", "type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecParametersPathtests": {"description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecParametersPathtests": {"description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecParametersPathtests": {"description": "PathTests are a series of existence tests that can be checked before a mutation is applied", "items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.ModifySetSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.ModifySetSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.ModifySetSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.externaldata.v1alpha1.Provider": {"description": "Provider is the Schema for the Provider API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.externaldata.v1alpha1.ProviderSpec", "description": "Spec defines the Provider specifications."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.externaldata", "version": "v1alpha1", "kind": "Provider"}]}, "sh.gatekeeper.externaldata.v1beta1.Provider": {"description": "Provider is the Schema for the providers API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.externaldata.v1beta1.ProviderSpec", "description": "Spec defines the Provider specifications."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.externaldata", "version": "v1beta1", "kind": "Provider"}]}, "sh.gatekeeper.externaldata.v1alpha1.ProviderSpec": {"description": "Spec defines the Provider specifications.", "properties": {"caBundle": {"description": "CABundle is a base64-encoded string that contains the TLS CA bundle in PEM format. It is used to verify the signature of the provider's certificate.", "type": "string"}, "timeout": {"description": "Timeout is the timeout when querying the provider.", "type": "integer"}, "url": {"description": "URL is the url for the provider. URL is prefixed with https://.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.externaldata.v1beta1.ProviderSpec": {"description": "Spec defines the Provider specifications.", "properties": {"caBundle": {"description": "CABundle is a base64-encoded string that contains the TLS CA bundle in PEM format. It is used to verify the signature of the provider's certificate.", "type": "string"}, "timeout": {"description": "Timeout is the timeout when querying the provider.", "type": "integer"}, "url": {"description": "URL is the url for the provider. URL is prefixed with https://.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.ConstraintPodStatus": {"description": "ConstraintPodStatus is the Schema for the constraintpodstatuses API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "status": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatus", "description": "ConstraintPodStatusStatus defines the observed state of ConstraintPodStatus."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.status", "version": "v1beta1", "kind": "ConstraintPodStatus"}]}, "sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatus": {"description": "ConstraintPodStatusStatus defines the observed state of ConstraintPodStatus.", "properties": {"constraintUID": {"description": "Storing the constraint UID allows us to detect drift, such as when a constraint has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "enforced": {"type": "boolean"}, "errors": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatusErrors"}, "description": "", "manifests_processed": true}, "id": {"type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatusOperations"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatusErrors": {"items": {"description": "Error represents a single error caught while adding a constraint to OPA.", "properties": {"code": {"type": "string"}, "location": {"type": "string"}, "message": {"type": "string"}}, "required": ["code", "message"], "type": "object"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.ConstraintPodStatusStatusOperations": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImage": {"description": "AssignImage is the Schema for the assignimage API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageMetadata", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpec", "description": "AssignImageSpec defines the desired state of AssignImage."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageStatus", "description": "AssignImageStatus defines the observed state of AssignImage."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1alpha1", "kind": "AssignImage"}]}, "sh.gatekeeper.mutations.v1alpha1.AssignImageMetadata": {"properties": {"name": {"maxLength": 63, "type": "string"}}, "type": "object", "description": ""}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpec": {"description": "AssignImageSpec defines the desired state of AssignImage.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main].image`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageStatus": {"description": "AssignImageStatus defines the observed state of AssignImage.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"assignDomain": {"description": "AssignDomain sets the domain component on an image string. The trailing slash should not be included.", "type": "string"}, "assignPath": {"description": "AssignPath sets the domain component on an image string.", "type": "string"}, "assignTag": {"description": "AssignImage sets the image component on an image string. It must start with a `:` or `@`.", "type": "string"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecParametersPathtests"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecParametersPathtests": {"items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignImageSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatus": {"description": "ConstraintTemplatePodStatus is the Schema for the constrainttemplatepodstatuses API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "status": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatus", "description": "ConstraintTemplatePodStatusStatus defines the observed state of ConstraintTemplatePodStatus."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.status", "version": "v1beta1", "kind": "ConstraintTemplatePodStatus"}]}, "sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatus": {"description": "ConstraintTemplatePodStatusStatus defines the observed state of ConstraintTemplatePodStatus.", "properties": {"errors": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatusErrors"}, "description": "", "manifests_processed": true}, "id": {"description": "Important: Run \"make\" to regenerate code after modifying this file", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatusOperations"}, "description": "", "manifests_processed": true}, "templateUID": {"description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatusErrors": {"items": {"description": "CreateCRDError represents a single error caught during parsing, compiling, etc.", "properties": {"code": {"type": "string"}, "location": {"type": "string"}, "message": {"type": "string"}}, "required": ["code", "message"], "type": "object"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.ConstraintTemplatePodStatusStatusOperations": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatus": {"description": "ExpansionTemplatePodStatus is the Schema for the expansiontemplatepodstatuses API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "status": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatus", "description": "ExpansionTemplatePodStatusStatus defines the observed state of ExpansionTemplatePodStatus."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.status", "version": "v1beta1", "kind": "ExpansionTemplatePodStatus"}]}, "sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatus": {"description": "ExpansionTemplatePodStatusStatus defines the observed state of ExpansionTemplatePodStatus.", "properties": {"errors": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatusErrors"}, "description": "", "manifests_processed": true}, "id": {"description": "Important: Run \"make\" to regenerate code after modifying this file", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatusOperations"}, "description": "", "manifests_processed": true}, "templateUID": {"description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatusErrors": {"items": {"properties": {"message": {"type": "string"}, "type": {"type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.ExpansionTemplatePodStatusStatusOperations": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.config.v1alpha1.Config": {"description": "Config is the Schema for the configs API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpec", "description": "ConfigSpec defines the desired state of Config."}, "status": {"description": "ConfigStatus defines the observed state of Config.", "type": "object"}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.config", "version": "v1alpha1", "kind": "Config"}]}, "sh.gatekeeper.config.v1alpha1.ConfigSpec": {"description": "ConfigSpec defines the desired state of Config.", "properties": {"match": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecMatch"}, "description": "Configuration for namespace exclusion", "manifests_processed": true}, "readiness": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecReadiness", "description": "Configuration for readiness tracker"}, "sync": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecSync", "description": "Configuration for syncing k8s objects"}, "validation": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecValidation", "description": "Configuration for validation"}}, "type": "object"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecMatch": {"description": "Configuration for namespace exclusion", "items": {"properties": {"excludedNamespaces": {"items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "processes": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecReadiness": {"description": "Configuration for readiness tracker", "properties": {"statsEnabled": {"type": "boolean"}}, "type": "object"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecSync": {"description": "Configuration for syncing k8s objects", "properties": {"syncOnly": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecSyncSynconly"}, "description": "If non-empty, only entries on this list will be replicated into OPA", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecValidation": {"description": "Configuration for validation", "properties": {"traces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.config.v1alpha1.ConfigSpecValidationTraces"}, "description": "List of requests to trace. Both \"user\" and \"kinds\" must be specified", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecSyncSynconly": {"description": "If non-empty, only entries on this list will be replicated into OPA", "items": {"properties": {"group": {"type": "string"}, "kind": {"type": "string"}, "version": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.config.v1alpha1.ConfigSpecValidationTraces": {"description": "List of requests to trace. Both \"user\" and \"kinds\" must be specified", "items": {"properties": {"dump": {"description": "Also dump the state of OPA with the trace. Set to `All` to dump everything.", "type": "string"}, "kind": {"description": "Only trace requests of the following GroupVersionKind", "properties": {"group": {"type": "string"}, "kind": {"type": "string"}, "version": {"type": "string"}}, "type": "object"}, "user": {"description": "Only trace requests from the specified user", "type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.Assign": {"description": "Assign is the Schema for the assign API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadata", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpec", "description": "AssignSpec defines the desired state of Assign."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignStatus", "description": "AssignStatus defines the observed state of Assign."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1", "kind": "Assign"}]}, "sh.gatekeeper.mutations.v1alpha1.Assign": {"description": "Assign is the Schema for the assign API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpec", "description": "AssignSpec defines the desired state of Assign."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignStatus", "description": "AssignStatus defines the observed state of Assign."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1alpha1", "kind": "Assign"}]}, "sh.gatekeeper.mutations.v1beta1.Assign": {"description": "Assign is the Schema for the assign API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpec", "description": "AssignSpec defines the desired state of Assign."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignStatus", "description": "AssignStatus defines the observed state of Assign."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1beta1", "kind": "Assign"}]}, "sh.gatekeeper.mutations.v1.AssignMetadata": {"description": "AssignMetadata is the Schema for the assignmetadata API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataMetadata", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpec", "description": "AssignMetadataSpec defines the desired state of AssignMetadata."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataStatus", "description": "AssignMetadataStatus defines the observed state of AssignMetadata."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1", "kind": "AssignMetadata"}]}, "sh.gatekeeper.mutations.v1.AssignSpec": {"description": "AssignSpec defines the desired state of Assign.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignStatus": {"description": "AssignStatus defines the observed state of Assign.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpec": {"description": "AssignSpec defines the desired state of Assign.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignStatus": {"description": "AssignStatus defines the observed state of Assign.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpec": {"description": "AssignSpec defines the desired state of Assign.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "manifests_processed": true}, "location": {"description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.", "type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatch", "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecParameters", "description": "Parameters define the behavior of the mutator."}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignStatus": {"description": "AssignStatus defines the observed state of Assign.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecParametersPathtests"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersPathtests"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatch": {"description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecParameters": {"description": "Parameters define the behavior of the mutator.", "properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}, "pathTests": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecParametersPathtests"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignStatusBypod": {"items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecParametersPathtests": {"items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersPathtests": {"items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecParametersPathtests": {"items": {"description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`. \n Available Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.", "properties": {"condition": {"description": "Condition describes whether the path either MustExist or MustNotExist in the original object", "enum": ["MustExist", "MustNotExist"], "type": "string"}, "subPath": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.MutatorPodStatus": {"description": "MutatorPodStatus is the Schema for the mutationpodstatuses API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "status": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.MutatorPodStatusStatus", "description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.status", "version": "v1beta1", "kind": "MutatorPodStatus"}]}, "sh.gatekeeper.status.v1beta1.MutatorPodStatusStatus": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.MutatorPodStatusStatusErrors"}, "description": "", "manifests_processed": true}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.status.v1beta1.MutatorPodStatusStatusOperations"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.status.v1beta1.MutatorPodStatusStatusErrors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "sh.gatekeeper.status.v1beta1.MutatorPodStatusStatusOperations": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.templates.v1.ConstraintTemplate": {"description": "ConstraintTemplate is the Schema for the constrainttemplates API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpec", "description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate."}, "status": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateStatus", "description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.templates", "version": "v1", "kind": "ConstraintTemplate"}]}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplate": {"description": "ConstraintTemplate is the Schema for the constrainttemplates API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpec", "description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate."}, "status": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateStatus", "description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.templates", "version": "v1alpha1", "kind": "ConstraintTemplate"}]}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplate": {"description": "ConstraintTemplate is the Schema for the constrainttemplates API", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpec", "description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate."}, "status": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateStatus", "description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.templates", "version": "v1beta1", "kind": "ConstraintTemplate"}]}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpec": {"description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate.", "properties": {"crd": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrd", "description": ""}, "targets": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecTargets"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateStatus": {"description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateStatusBypod"}, "description": "", "manifests_processed": true}, "created": {"type": "boolean"}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpec": {"description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate.", "properties": {"crd": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrd", "description": ""}, "targets": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecTargets"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateStatus": {"description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateStatusBypod"}, "description": "", "manifests_processed": true}, "created": {"type": "boolean"}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpec": {"description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate.", "properties": {"crd": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrd", "description": ""}, "targets": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecTargets"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateStatus": {"description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateStatusBypod"}, "description": "", "manifests_processed": true}, "created": {"type": "boolean"}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrd": {"properties": {"spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpec", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecTargets": {"items": {"properties": {"code": {"description": "The source code options for the constraint template. \"Rego\" can only be specified in one place (either here or in the \"rego\" field)", "items": {"properties": {"engine": {"description": "The engine used to evaluate the code. Example: \"Rego\". Required.", "type": "string"}, "source": {"description": "The source code for the template. Required.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["engine", "source"], "type": "object"}, "type": "array", "x-kubernetes-list-map-keys": ["engine"], "x-kubernetes-list-type": "map"}, "libs": {"items": {"type": "string"}, "type": "array"}, "rego": {"type": "string"}, "target": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.templates.v1.ConstraintTemplateStatusBypod": {"items": {"description": "ByPodStatus defines the observed state of ConstraintTemplate as seen by an individual controller", "properties": {"errors": {"items": {"description": "CreateCRDError represents a single error caught during parsing, compiling, etc.", "properties": {"code": {"type": "string"}, "location": {"type": "string"}, "message": {"type": "string"}}, "required": ["code", "message"], "type": "object"}, "type": "array"}, "id": {"description": "a unique identifier for the pod that wrote the status", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object", "x-kubernetes-preserve-unknown-fields": true}, "type": "array"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrd": {"properties": {"spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpec", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecTargets": {"items": {"properties": {"code": {"description": "The source code options for the constraint template. \"Rego\" can only be specified in one place (either here or in the \"rego\" field)", "items": {"properties": {"engine": {"description": "The engine used to evaluate the code. Example: \"Rego\". Required.", "type": "string"}, "source": {"description": "The source code for the template. Required.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["engine", "source"], "type": "object"}, "type": "array", "x-kubernetes-list-map-keys": ["engine"], "x-kubernetes-list-type": "map"}, "libs": {"items": {"type": "string"}, "type": "array"}, "rego": {"type": "string"}, "target": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateStatusBypod": {"items": {"description": "ByPodStatus defines the observed state of ConstraintTemplate as seen by an individual controller", "properties": {"errors": {"items": {"description": "CreateCRDError represents a single error caught during parsing, compiling, etc.", "properties": {"code": {"type": "string"}, "location": {"type": "string"}, "message": {"type": "string"}}, "required": ["code", "message"], "type": "object"}, "type": "array"}, "id": {"description": "a unique identifier for the pod that wrote the status", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object", "x-kubernetes-preserve-unknown-fields": true}, "type": "array"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrd": {"properties": {"spec": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpec", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecTargets": {"items": {"properties": {"code": {"description": "The source code options for the constraint template. \"Rego\" can only be specified in one place (either here or in the \"rego\" field)", "items": {"properties": {"engine": {"description": "The engine used to evaluate the code. Example: \"Rego\". Required.", "type": "string"}, "source": {"description": "The source code for the template. Required.", "x-kubernetes-preserve-unknown-fields": true}}, "required": ["engine", "source"], "type": "object"}, "type": "array", "x-kubernetes-list-map-keys": ["engine"], "x-kubernetes-list-type": "map"}, "libs": {"items": {"type": "string"}, "type": "array"}, "rego": {"type": "string"}, "target": {"type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateStatusBypod": {"items": {"description": "ByPodStatus defines the observed state of ConstraintTemplate as seen by an individual controller", "properties": {"errors": {"items": {"description": "CreateCRDError represents a single error caught during parsing, compiling, etc.", "properties": {"code": {"type": "string"}, "location": {"type": "string"}, "message": {"type": "string"}}, "required": ["code", "message"], "type": "object"}, "type": "array"}, "id": {"description": "a unique identifier for the pod that wrote the status", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}}, "type": "object", "x-kubernetes-preserve-unknown-fields": true}, "type": "array"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpec": {"properties": {"names": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecNames", "description": ""}, "validation": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecValidation", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpec": {"properties": {"names": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecNames", "description": ""}, "validation": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecValidation", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpec": {"properties": {"names": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecNames", "description": ""}, "validation": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecValidation", "description": ""}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecNames": {"properties": {"kind": {"type": "string"}, "shortNames": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecNamesShortnames"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecValidation": {"default": {"legacySchema": false}, "properties": {"legacySchema": {"default": false, "type": "boolean"}, "openAPIV3Schema": {"type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecNames": {"properties": {"kind": {"type": "string"}, "shortNames": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecNamesShortnames"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecValidation": {"default": {"legacySchema": true}, "properties": {"legacySchema": {"default": true, "type": "boolean"}, "openAPIV3Schema": {"type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecNames": {"properties": {"kind": {"type": "string"}, "shortNames": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecNamesShortnames"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecValidation": {"default": {"legacySchema": true}, "properties": {"legacySchema": {"default": true, "type": "boolean"}, "openAPIV3Schema": {"type": "object", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.templates.v1.ConstraintTemplateSpecCrdSpecNamesShortnames": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.templates.v1alpha1.ConstraintTemplateSpecCrdSpecNamesShortnames": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.templates.v1beta1.ConstraintTemplateSpecCrdSpecNamesShortnames": {"items": {"type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadata": {"description": "AssignMetadata is the Schema for the assignmetadata API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpec", "description": "AssignMetadataSpec defines the desired state of AssignMetadata."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataStatus", "description": "AssignMetadataStatus defines the observed state of AssignMetadata."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1alpha1", "kind": "AssignMetadata"}]}, "sh.gatekeeper.mutations.v1beta1.AssignMetadata": {"description": "AssignMetadata is the Schema for the assignmetadata API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpec", "description": "AssignMetadataSpec defines the desired state of AssignMetadata."}, "status": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataStatus", "description": "AssignMetadataStatus defines the observed state of AssignMetadata."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.mutations", "version": "v1beta1", "kind": "AssignMetadata"}]}, "sh.gatekeeper.mutations.v1.AssignMetadataMetadata": {"properties": {"name": {"maxLength": 63, "type": "string"}}, "type": "object", "description": ""}, "sh.gatekeeper.mutations.v1.AssignMetadataSpec": {"description": "AssignMetadataSpec defines the desired state of AssignMetadata.", "properties": {"location": {"type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatch", "description": "Match selects which objects are in scope."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecParameters", "description": ""}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataStatus": {"description": "AssignMetadataStatus defines the observed state of AssignMetadata.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataStatusBypod"}, "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpec": {"description": "AssignMetadataSpec defines the desired state of AssignMetadata.", "properties": {"location": {"type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatch", "description": "Match selects which objects are in scope."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParameters", "description": ""}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataStatus": {"description": "AssignMetadataStatus defines the observed state of AssignMetadata.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataStatusBypod"}, "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpec": {"description": "AssignMetadataSpec defines the desired state of AssignMetadata.", "properties": {"location": {"type": "string"}, "match": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatch", "description": "Match selects which objects are in scope."}, "parameters": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParameters", "description": ""}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataStatus": {"description": "AssignMetadataStatus defines the observed state of AssignMetadata.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataStatusBypod"}, "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatch": {"description": "Match selects which objects are in scope.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecParameters": {"properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataStatusBypod": {"description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatch": {"description": "Match selects which objects are in scope.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParameters": {"properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataStatusBypod": {"description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatch": {"description": "Match selects which objects are in scope.", "properties": {"excludedNamespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchExcludednamespaces"}, "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "kinds": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchKinds"}, "description": "", "manifests_processed": true}, "labelSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchLabelselector", "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector."}, "name": {"description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "namespaceSelector": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaceselector", "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace."}, "namespaces": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaces"}, "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "manifests_processed": true}, "scope": {"description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)", "type": "string"}, "source": {"description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.", "enum": ["All", "Generated", "Original"], "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParameters": {"properties": {"assign": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssign", "description": "Assign.value holds the value to be assigned"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataStatusBypod": {"description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file", "items": {"description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.", "properties": {"enforced": {"type": "boolean"}, "errors": {"items": {"description": "MutatorError represents a single error caught while adding a mutator to a system.", "properties": {"message": {"type": "string"}, "type": {"description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.", "type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"type": "string"}, "mutatorUID": {"description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchExcludednamespaces": {"description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchKinds": {"items": {"description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.", "properties": {"apiGroups": {"description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", "items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchLabelselector": {"description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchLabelselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaceselector": {"description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.", "properties": {"matchExpressions": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions"}, "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "manifests_processed": true}, "matchLabels": {"additionalProperties": {"type": "string"}, "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", "type": "object"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaces": {"description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.", "items": {"description": "A string that supports globbing at its front or end. Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\".  The asterisk is required for wildcard matching.", "pattern": "^(\\*|\\*-)?[a-z0-9]([-:a-z0-9]*[a-z0-9])?(\\*|-\\*)?$", "type": "string"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssign": {"description": "Assign.value holds the value to be assigned", "properties": {"externalData": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssignExternaldata", "description": "ExternalData describes the external data provider to be used for mutation."}, "fromMetadata": {"$ref": "#/definitions/sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssignFrommetadata", "description": "FromMetadata assigns a value from the specified metadata field."}, "value": {"description": "Value is a constant value that will be assigned to `location`", "x-kubernetes-preserve-unknown-fields": true}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1.AssignMetadataSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1alpha1.AssignMetadataSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchLabelselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecMatchNamespaceselectorMatchexpressions": {"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", "items": {"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", "properties": {"key": {"description": "key is the label key that the selector applies to.", "type": "string"}, "operator": {"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.", "type": "string"}, "values": {"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", "items": {"type": "string"}, "type": "array"}}, "required": ["key", "operator"], "type": "object"}, "type": "array"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssignExternaldata": {"description": "ExternalData describes the external data provider to be used for mutation.", "properties": {"dataSource": {"default": "ValueAtLocation", "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.", "enum": ["ValueAtLocation", "Username"], "type": "string"}, "default": {"description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".", "type": "string"}, "failurePolicy": {"default": "Fail", "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.", "enum": ["UseDefault", "Ignore", "Fail"], "type": "string"}, "provider": {"description": "Provider is the name of the external data provider.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.mutations.v1beta1.AssignMetadataSpecParametersAssignFrommetadata": {"description": "FromMetadata assigns a value from the specified metadata field.", "properties": {"field": {"description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.", "type": "string"}}, "type": "object"}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplate": {"description": "ExpansionTemplate is the Schema for the ExpansionTemplate API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpec", "description": "ExpansionTemplateSpec defines the desired state of ExpansionTemplate."}, "status": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateStatus", "description": "ExpansionTemplateStatus defines the observed state of ExpansionTemplate."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.expansion", "version": "v1alpha1", "kind": "ExpansionTemplate"}]}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplate": {"description": "ExpansionTemplate is the Schema for the ExpansionTemplate API.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object", "description": ""}, "spec": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpec", "description": "ExpansionTemplateSpec defines the desired state of ExpansionTemplate."}, "status": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateStatus", "description": "ExpansionTemplateStatus defines the observed state of ExpansionTemplate."}}, "type": "object", "x-kubernetes-group-version-kind": [{"group": "sh.gatekeeper.expansion", "version": "v1beta1", "kind": "ExpansionTemplate"}]}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpec": {"description": "ExpansionTemplateSpec defines the desired state of ExpansionTemplate.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds of generator resources which will be expanded.", "manifests_processed": true}, "enforcementAction": {"description": "EnforcementAction specifies the enforcement action to be used for resources matching the ExpansionTemplate. Specifying an empty value will use the enforcement action specified by the Constraint in violation.", "type": "string"}, "generatedGVK": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpecGeneratedgvk", "description": "GeneratedGVK specifies the GVK of the resources which the generator resource creates."}, "templateSource": {"description": "TemplateSource specifies the source field on the generator resource to use as the base for expanded resource. For Pod-creating generators, this is usually spec.template", "type": "string"}}, "type": "object"}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateStatus": {"description": "ExpansionTemplateStatus defines the observed state of ExpansionTemplate.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpec": {"description": "ExpansionTemplateSpec defines the desired state of ExpansionTemplate.", "properties": {"applyTo": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpecApplyto"}, "description": "ApplyTo lists the specific groups, versions and kinds of generator resources which will be expanded.", "manifests_processed": true}, "enforcementAction": {"description": "EnforcementAction specifies the enforcement action to be used for resources matching the ExpansionTemplate. Specifying an empty value will use the enforcement action specified by the Constraint in violation.", "type": "string"}, "generatedGVK": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpecGeneratedgvk", "description": "GeneratedGVK specifies the GVK of the resources which the generator resource creates."}, "templateSource": {"description": "TemplateSource specifies the source field on the generator resource to use as the base for expanded resource. For Pod-creating generators, this is usually spec.template", "type": "string"}}, "type": "object"}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplateStatus": {"description": "ExpansionTemplateStatus defines the observed state of ExpansionTemplate.", "properties": {"byPod": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateStatusBypod"}, "description": "", "manifests_processed": true}}, "type": "object"}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds of generator resources which will be expanded.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateSpecGeneratedgvk": {"description": "GeneratedGVK specifies the GVK of the resources which the generator resource creates.", "properties": {"group": {"type": "string"}, "kind": {"type": "string"}, "version": {"type": "string"}}, "type": "object"}, "sh.gatekeeper.expansion.v1alpha1.ExpansionTemplateStatusBypod": {"items": {"description": "ExpansionTemplatePodStatusStatus defines the observed state of ExpansionTemplatePodStatus.", "properties": {"errors": {"items": {"properties": {"message": {"type": "string"}, "type": {"type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"description": "Important: Run \"make\" to regenerate code after modifying this file", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}, "templateUID": {"description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.", "type": "string"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpecApplyto": {"description": "ApplyTo lists the specific groups, versions and kinds of generator resources which will be expanded.", "items": {"description": {"type": "array", "items": {"$ref": "#/definitions/sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpecApplytoDescription"}, "description": "", "manifests_processed": true}, "properties": {"groups": {"items": {"type": "string"}, "type": "array"}, "kinds": {"items": {"type": "string"}, "type": "array"}, "versions": {"items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplateSpecGeneratedgvk": {"description": "GeneratedGVK specifies the GVK of the resources which the generator resource creates.", "properties": {"group": {"type": "string"}, "kind": {"type": "string"}, "version": {"type": "string"}}, "type": "object"}, "sh.gatekeeper.expansion.v1beta1.ExpansionTemplateStatusBypod": {"items": {"description": "ExpansionTemplatePodStatusStatus defines the observed state of ExpansionTemplatePodStatus.", "properties": {"errors": {"items": {"properties": {"message": {"type": "string"}, "type": {"type": "string"}}, "required": ["message"], "type": "object"}, "type": "array"}, "id": {"description": "Important: Run \"make\" to regenerate code after modifying this file", "type": "string"}, "observedGeneration": {"format": "int64", "type": "integer"}, "operations": {"items": {"type": "string"}, "type": "array"}, "templateUID": {"description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.", "type": "string"}}, "type": "object"}, "type": "array"}}}